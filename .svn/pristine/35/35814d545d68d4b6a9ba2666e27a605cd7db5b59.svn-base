\chapter{Virtual Machine Code}

The virtual machine code that is generated for various kinds of Icon
expression is listed below. The form of code given is icode, the
output of the Icon linker cast in a readable format. The ucode
produced' by the Icon translator, which serves as input to the Icon
linker, is slightly different in some cases, since th linker performs
some refinements.

\section{Identifiers}

As mentioned in Sec. 8.2.2, the four kinds of identifiers are
distinguished by where their values are located. All are referred to
by indices, which are zero based.


The values of global identifiers are kept in an array that is loaded
from the icode file and is at a fixed place in memory during program
execution. By convention, the zeroth global identifier contains the
procedure descriptor for main The following instruction pushes a
variable pointing to the value of main onto the interpreter stack:

\begin{flushleft}
\tablefirsthead{\hline
 main &
\centering\arraybslash global \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

Static identifiers are essentially global identifiers that are only
known on a per-procedure basis. Like global identifiers, the values of
static identifiers are in an array that is at a fixed location. Static
identifiers are numbered starting at zero and continuing through the
program. For example, if count is static identifier 10 the following
instruction pushes a variable descriptor pointing to that static
identifier onto the stack:

\begin{flushleft}
\tablefirsthead{\hline
 count &
\centering\arraybslash static \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 10\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

The space for the values of arguments and local identifiers is
allocated on the stack when the procedure in which they occur is
called. If x is argument zero and i is local zero for the current
procedure, the following instructions push variable descriptors for
them onto the stack:

\begin{flushleft}
\tablefirsthead{\hline
 x &
\centering\arraybslash arg \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

\bigskip

\begin{flushleft}
\tablefirsthead{\hline
 i &
\centering\arraybslash local \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}


\section{Literals}

The virtual machine instruction generated for an integer literal
pushes the integer onto the stack as an Icon descriptor. The value of
the integer is the argument to the instruction:

\begin{flushleft}
\tablefirsthead{\hline
 100 &
\centering\arraybslash int \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 100\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

The instruction generated for a string literal is similar to that for
an integer literal, except that the address of the string and its
length are given as arguments. The string itself is in a region of
data produced by the linker and is loaded as part of the icode file:

\begin{flushleft}
\tablefirsthead{\hline
 {\textquotedbl}hello{\textquotedbl} &
\centering\arraybslash str \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 5,a1\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

The instruction generated for a real or cset literal has an argument
that is the address of a data block for the corresponding value. Such
blocks are in the data region generated by the linker:

\begin{flushleft}
\tablefirsthead{\hline
 100.2 &
\centering\arraybslash real \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ a2\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

\bigskip

\begin{flushleft}
\tablefirsthead{\hline
 {}'aeiou' &
\centering\arraybslash cset \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ a3\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}
\section{Keywords}

The instruction generated for most keywords results in a call to a C
function that pushes a descriptor for the keyword onto the stack. The
argument is an index that identifies the keyword. For example, \&date
is keyword 4:

\begin{flushleft}
\tablefirsthead{\hline
 \&date &
\centering\arraybslash keywd \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

Some keywords correspond directly to virtual machine
instructions. Examples are \&null and \&fail:

\begin{flushleft}
\tablefirsthead{\hline
 \&null &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

\bigskip

\begin{flushleft}
\tablefirsthead{\hline
 \&fail &
\centering\arraybslash efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}


\section{Operators}

The code generated for a unary operator first pushes a null
descriptor, then evaluates the code for the argument, and finally
executes a virtual machine instruction that is specific to the
operator:

\begin{flushleft}
\tablefirsthead{\hline
 *expr &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr\newline
}size \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

The code generated for a binary operator is the same as the code
generated for a unary operator, except that there are two arguments:

\begin{flushleft}
\tablefirsthead{\hline
 expr1 + expr2 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
}plus \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9066598in}|m{2.75596in}|}

\end{xtabular}
\end{flushleft}

An augmented assignment operator uses the virtual machine instruction
dup to duplicate the result produced by its first argument:

\begin{center}
\tablefirsthead{\hline
 expr1 +:= expr2 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
}dup \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr2\newline
}plus \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
asgn \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

The difference between the code generated for left- and
right-associative operators is illustrated by the following examples:

\begin{center}
\tablefirsthead{\hline
 expr1 + expr2 + expr3 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
}plus \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr3\newline
}plus \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

\bigskip

\begin{center}
\tablefirsthead{\hline
 expr1 := expr2 := expr3 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
}pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr2\newline
code for expr3\newline
}asgn \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
asgn \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

A subscripting expression is simply a binary operator with a
distinguished syntax:

\begin{center}
\tablefirsthead{\hline
 expr1 [ expr2 ] &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
}subsc \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

A sectioning expression is a ternary operator:

\begin{center}
\tablefirsthead{\hline
 expr1 [ expr2 : expr3 ] &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
code for expr3\newline
}sect \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Sectioning expressions with relative range specifications are simply
abbreviations. The virtual machine instructions for them include the
instructions for performing the necessary arithmetic:

\begin{center}
\tablefirsthead{\hline
 expr1 [ expr2 +: expr3 ] &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
}dup \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr3\newline
}plus \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
sect \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

A to-by expression is another ternary operator with a distinguished syntax:

\begin{center}
\tablefirsthead{\hline
 expr1 to expr2 by expr3 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
code for expr3\newline
}toby \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

If the by clause is omitted, an instruction that pushes a descriptor
for the integer is supplied:

\begin{center}
\tablefirsthead{\hline
 expr1 to expr2 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
}push1 \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
toby \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

The code generated for an explicit list is similar to the code
generated for an operator. The instruction that constructs the list
has an argument that indicates the number of elements in the list:

\begin{center}
\tablefirsthead{\hline
 [expr1, expr2, expr3] &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1\newline
code for expr2\newline
code for expr3\newline
}llist \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Calls}

The code generated for a call also is similar to the code generated
for an operator except that a null descriptor is not pushed (it is
provided by the invoke instruction). The argument of invoke is the
number of arguments present in the call, not counting the zeroth
argument, whose value is the procedure or integer that is applied to
the arguments:

\begin{center}
\tablefirsthead{\hline
 expr0(expr1, expr2) &
\centering\arraybslash \textit{code for expr0\newline
code for expr1\newline
code for expr2\newline
}invoke \ \ \ \ \ \ 2 \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

In a mutual evaluation expression in which the zeroth argument of the
{\textquotedbl}call{\textquotedbl} is omitted, the default value is
-1, for which an instruction is provided:

\begin{center}
\tablefirsthead{\hline
 (expr1, expr2, expr3) &
\centering\arraybslash pushn1 \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1\newline
code for expr2\newline
code for expr3\newline
}invoke \ \ \ \ \ \ \ \ \ 3\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Compound Expressions and Conjunction}

The difference between a compound expression and a conjunction
expression is illustrated by the following examples. Note that the
code generated for conjunction is considerably simpler than that
generated for a compound expression, since no separate expression
frames are needed:

\begin{center}
\tablefirsthead{\hline
 \{expr1; expr2; expr3\} &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L2\textit{\newline
code for expr2\newline
}unmark \ \ \ \ \ \ \ \ \ \newline
L2:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr3}\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

\bigskip

\begin{center}
\tablefirsthead{\hline
 expr1 \& expr2 \& expr3 &
\centering\arraybslash \textit{code for expr1}\newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2\newline
}pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr3}\\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Selection Expressions}

In the code generated for an if-then-else expression, the control
expression bounded and has an expression frame of its own:

\begin{center}
\tablefirsthead{\hline
 if expr1 then expr2\newline
 \ \ else expr3 &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2\newline
 \ \ \ \ \ \ \ \ \ }goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \newline
L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr3\newline
}L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

If the else clause is omitted, mark0 is used, so that if the control
expression fails, this failure is transmitted to the enclosing
expression frame:

\begin{center}
\tablefirsthead{\hline
 if expr1 then expr2 &
\centering\arraybslash mark0 \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2}
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

The code generated for a case expression is relatively complicated. As
for similar control structures, the control expression is bounded. The
result it produces is placed on the top of the stack by the eret
instruction, which saves the result of evaluating \textit{expr1},
removes the current expression frame, and then push the saved result
on the top of the stack. The ccase instruction pushes a null
descriptor onto the stack and duplicates the descriptor just below the
current efp on the top of the stack. This has the effect of providing
a null descriptor and the first argument for the equivalence
comparison operation performed by eqv. The second argument of eqv is
provided by the code for the selector clause. The remainder of the
code for a case clause removes the current expression frame marker. in
case the comparison succeeds. and evaluates the selected expression:

\begin{center}
\tablefirsthead{\hline
 case expr1 of \{\newline
 \ \ expr2 : expr3\newline
 \ \ expr4 : expr5\newline
 \ \ default: expr6\newline
 \ \ \} &
\centering\arraybslash mark0 \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1}\newline
eret \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L2\newline
ccase \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2\newline
}eqv \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
unmark \ \ \ \ \ \ \ \ \ \newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr3\newline
}goto \ \ \ \ \ \ \ \ \ \ \ L1\newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L3\newline
ccase \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr4\newline
}eqv \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
unmark \ \ \ \ \ \ \ \ \ \newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr5\newline
}goto \ \ \ \ \ \ \ \ \ \ \ L1\newline
L3: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr6\newline
}L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
%% \begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

%% \end{xtabular}
\end{center}


\section{Negation}

The not control structure fails if its argument succeeds but produces
the null value if its argument fails:

\begin{center}
\tablefirsthead{\hline
 not expr &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr }\newline
unmark \ \ \ \ \ \ \ \ \ \newline
efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
pnull \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Generative Control Structures}

If the first argument of an alternation expression produces a result,
esusp produces a generator frame for possible resumption and
duplicates the surrounding expression frame on the top of the
stack. The result of the first argument is then pushed on the top of
the stack, so that it looks as if the first argument merely produced a
result. The second argument is then bypassed. When the first argument
does not produce a result, its expression frame is removed, leaving
the second argument to be evaluated:

\begin{center}
\tablefirsthead{\hline
 expr1 {\textbar} expr2 &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr1}\newline
esusp \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \newline
L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr2\newline
}L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Since alternation is treated as a binary operation, a succession of
alternations produces the following code:

\begin{center}
\tablefirsthead{\hline
 expr1 {\textbar} expr2 {\textbar} expr3 &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr1}\newline
esusp \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \newline
L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L3\textit{\newline
code for expr2\newline
}esusp \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr3}\newline
L3: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Repeated alternation is complicated by the special treatment of the
case in which its argument does not produce a result. If it does not
produce a result, the failure is transmitted to the enclosing
expression frame, since the failure ipc is 0. However, if it produces
a result, the failure ipc is changed by chfail so that subsequent
failure causes transfer to the beginning of the repeated alternation
expression. The esusp instruction produces the same effect as that for
regular alternation. Note that changing the failure ipc only affects
the expression frame marker on the stack. When mark is executed again,
a new expression frame marker with a failure ipc of 0 is created.

\begin{center}
\tablefirsthead{\hline
 {\textbar} expr &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark0 \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr \ }\newline
 \ \ \ \ \ \ \ \ \ \ \ \ chfail \ \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \newline
esusp \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

In the limitation control structure, the normal left-to-right order of
evaluation is reversed and the limiting expression is evaluated
first. The limit instruction checks that the value is an integer and
pushes it. It then creates an expression frame marker with a zero
failure ipc. Thus, the limit is always one descriptor below the
expression marker created by the subsequent mark instruction. The
lsusp instruction is similar to the esusp instruction, except that it
checks the limit. If the limit is zero, it fails instead of
suspending. Otherwise, the limit is decremented:

\begin{center}
\tablefirsthead{\hline
 expr1 {\textbackslash} expr2 &
\centering\arraybslash \textit{code for expr2}\newline
limit \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr1}\newline
lsusp \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Loops}

The code generated for a repeat loop assures that the expression frame
is handled uniformly, regardless of the success or failure of the
expression:

\begin{center}
\tablefirsthead{\hline
 repeat expr &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr \ }\newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

A while loop, on the other hand, transmits failure to the enclosing
expression frame if its control expression fails. Note that both
\textit{expr1} and \textit{expr2} are evaluated in separate expression
frames:

\begin{center}
\tablefirsthead{\hline
 while expr1 do expr2 &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark0 \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \textit{code for expr2}\newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

If the do clause is omitted, the generated code is similar to that for
a repeat loop, except for the argument of mark:

\begin{center}
\tablefirsthead{\hline
 while expr &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark0 \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr \ }\newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

An until loop simply reverses the logic of a while loop:

\begin{center}
\tablefirsthead{\hline
 until expr1 do expr2 &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L2\textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L1\newline
 \textit{code for expr2\newline
}unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

The every-do control structure differs from the while-do control
structure in that when its control expression produces a result, its
expression frame is not removed. Instead, the result is discarded by
pop, and the do clause is evaluated in its own expression frame. The
efail instruction forces the resumption of a suspended generator that
may have been produced by an esusp instruction in the code for expr1:

\begin{center}
\tablefirsthead{\hline
 every expr1 do expr2 &
\centering\arraybslash mark0 \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
 \ code for expr1 \ }\newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark0 \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
 \ code for expr2 \ }\newline
\textit{ }unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Breaks from loops normally occur in the context of other
expressions. In the following example, the break expression removes
the expression frame corresponding to the repeat control structure,
evaluates its argument expression, and then transfers to a point
beyond the end of the loop:

\begin{center}
\tablefirsthead{\hline
 repeat\newline
 \ \ expr1 {\textbar} break expr2 &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L1\newline
mark \ \ \ \ \ \ \ \ \ L3\textit{\newline
code for expr1}\newline
esusp \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L4 \ \ \ \ \ \ \ \ \ \ \ \ \newline
L3: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \textit{code for expr2\newline
} \ \ \ \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \ \ \ \newline
L4: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Like break, next normally occurs in the context of other
expressions. In the following example, next transfers control from a
selection expression to the beginning of the loop:

\begin{center}
\tablefirsthead{\hline
 while expr1 do\newline
 \ \ if expr2 then next\newline
 \ \ \ \ \ else expr3 &
\centering\arraybslash L1:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark0 \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L1\newline
mark \ \ \ \ \ \ \ \ \ L4\newline
\textit{code for expr2}\newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L2 \ \ \ \ \ \ \ \ \ \newline
L4: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr3}\newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
unmark \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ goto \ \ \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{String Scanning}

String scanning is a control structure, rather than an operator, since
the values of \&subject and \&pos must be saved and new values
established before the second argument is evaluated. This is
accomplished by bscan. The instruction bscan saves the current values
of \&subject and \&pos and establishes their new values before
\textit{expr2} is evaluated. escan restores their values prior to the
execution of bscan:

\begin{center}
\tablefirsthead{\hline
 expr1 ? expr2 &
\centering\arraybslash \textit{code for expr1}\newline
bscan \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2}\newline
escan \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

Augmented string scanning is similar to other augmented operations,
but it differs in that the string scanning operation does not push a
null value on the stack. The instruction sdup therefore is slightly
different from dup, which is used in other augmented assignment
operations:

\begin{center}
\tablefirsthead{\hline
 expr1 ?:= expr2 &
\centering\arraybslash pnull \ \ \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr1}\newline
sdup \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
bscan \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
\textit{code for expr2}\newline
escan \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
asgn \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Procedure Returns}

The code generated for a return expression consists of the pret
instruction. However, it allows for failure of the argument of return,
which is equivalent to fail:

\begin{center}
\tablefirsthead{\hline
 return expr &
\centering\arraybslash mark \ \ \ \ \ \ \ \ \ L1\textit{\newline
code for expr \ }\newline
pret \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
pfail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

\bigskip

\begin{center}
\tablefirsthead{\hline
 fail &
\centering\arraybslash pfail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}

The code generated for the suspend expression is analogous to the code
generated for alternation, except that the result is returned from the
current procedure. The efail instruction causes subsequent results to
be produced if the call is resumed:

\begin{center}
\tablefirsthead{\hline
 suspend expr &
\centering\arraybslash mark0 \ \ \ \ \ \ \ \ \ \ \ \ \textit{\newline
code for expr \ }\newline
psusp \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}


\section{Co-Expression Creation}

The first instruction in the code generated for a create expression is
a transfer around the code that is executed when the resulting
co-expression is activated The create instruction constructs a
descriptor that points to the co-expression whose code is at the label
given in its argument and pushes this descriptor on the stack. When
the co-expression is activated the first time, evaluation starts at
the label stored in the co-expression. The result that is on the top
of the stack is popped, since transmission of a result to the first
activation of a co-expression is meaningless. If \textit{expr}
produces a result, coret returns that result to the activating
co-expression. If \textit{expr} fails, cofail signals failure to the
activating co-expression:

\begin{center}
\tablefirsthead{\hline
 create expr &
\centering\arraybslash goto \ \ \ \ \ \ \ \ \ \ \ L3\newline
L1: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
pop \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
mark \ \ \ \ \ \ \ \ \ L2\textit{\newline
code for expr \ }\newline
coret \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
efail \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
L2: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
cofail \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
goto \ \ \ \ \ \ \ \ \ \ \ L2\newline
L3: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \newline
 \ \ \ \ \ \ \ \ \ \ \ \ create \ \ \ \ \ \ \ \ L1 \ \ \ \ \ \ \ \ \ \ \ \ \\}
\tablelasttail{\hline}
\begin{xtabular}{|m{1.9073598in}|m{2.75596in}|}

\end{xtabular}
\end{center}
