### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 135 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

procedure Field(x1,x2,x3)
   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename
procedure Progend(x1)
   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()
  #
  # scope check on classes defined in this source file
  # fix me
  #
#  every (!native).scopeck()
  every (classes.foreach_t()).scopeck()
  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)
end
#line 91 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define DEFAULT 268
$define DO 269
$define ELSE 270
$define END 271
$define EVERY 272
$define FAIL 273
$define GLOBAL 274
$define IF 275
$define IMPORT 276
$define iconINITIAL 277
$define INITIALLY 278
$define INVOCABLE 279
$define LINK 280
$define LOCAL 281
$define METHOD 282
$define NEXT 283
$define NOT 284
$define OF 285
$define PACKAGE 286
$define PROCEDURE 287
$define RECORD 288
$define REPEAT 289
$define RETURN 290
$define STATIC 291
$define SUSPEND 292
$define THEN 293
$define TO 294
$define UNTIL 295
$define WHILE 296
$define BANG 297
$define MOD 298
$define AUGMOD 299
$define AND 300
$define AUGAND 301
$define STAR 302
$define AUGSTAR 303
$define INTER 304
$define AUGINTER 305
$define PLUS 306
$define AUGPLUS 307
$define UNION 308
$define AUGUNION 309
$define MINUS 310
$define AUGMINUS 311
$define DIFF 312
$define AUGDIFF 313
$define DOT 314
$define SLASH 315
$define AUGSLASH 316
$define ASSIGN 317
$define SWAP 318
$define NMLT 319
$define AUGNMLT 320
$define REVASSIGN 321
$define REVSWAP 322
$define SLT 323
$define AUGSLT 324
$define SLE 325
$define AUGSLE 326
$define NMLE 327
$define AUGNMLE 328
$define NMEQ 329
$define AUGNMEQ 330
$define SEQ 331
$define AUGSEQ 332
$define EQUIV 333
$define AUGEQUIV 334
$define NMGT 335
$define AUGNMGT 336
$define NMGE 337
$define AUGNMGE 338
$define SGT 339
$define AUGSGT 340
$define SGE 341
$define AUGSGE 342
$define QMARK 343
$define AUGQMARK 344
$define AT 345
$define AUGAT 346
$define BACKSLASH 347
$define CARET 348
$define AUGCARET 349
$define BAR 350
$define CONCAT 351
$define AUGCONCAT 352
$define LCONCAT 353
$define AUGLCONCAT 354
$define TILDE 355
$define NMNE 356
$define AUGNMNE 357
$define SNE 358
$define AUGSNE 359
$define NEQUIV 360
$define AUGNEQUIV 361
$define LPAREN 362
$define RPAREN 363
$define PCOLON 364
$define COMMA 365
$define MCOLON 366
$define COLON 367
$define COLONCOLON 368
$define SEMICOL 369
$define LBRACK 370
$define RBRACK 371
$define LBRACE 372
$define RBRACE 373
$define DOLLAR 374
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   10,   10,   16,   18,   18,   17,
   17,   17,   17,    9,   20,   20,   21,   21,   21,    7,
    8,    6,   23,   23,   22,   22,    5,    3,   25,   25,
    4,   19,   26,   27,   15,   15,   15,   24,   24,   28,
   28,   29,   29,   29,   29,   12,   12,   31,   31,   13,
   13,   14,   14,   33,   33,   32,   32,   34,   34,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   36,   36,   36,   37,   37,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   39,   39,   39,   40,   40,   40,   40,   40,
   41,   41,   41,   41,   41,   42,   42,   43,   43,   43,
   43,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   50,   50,   51,   51,   52,
   52,   53,   47,   47,   47,   47,   48,   48,   49,   57,
   57,   58,   58,   54,   54,   56,   56,   30,   30,   30,
   30,   46,   59,   59,   59,   55,   55,    0,    4,   32,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    3,    4,    6,    0,    3,    0,
    2,    2,    2,    2,    1,    3,    1,    1,    3,    2,
    2,    2,    1,    3,    1,    1,    2,    5,    0,    1,
    6,    6,    5,    5,    0,    1,    3,    1,    3,    1,
    3,    1,    3,    3,    5,    0,    4,    1,    1,    0,
    3,    0,    3,    0,    1,    1,    3,    1,    3,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    5,    1,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    3,    3,    1,    3,    1,    3,    3,
    3,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    1,    2,    3,
    3,    3,    4,    3,    4,    4,    6,    6,    8,    8,
    3,    3,    3,    2,    2,    2,    4,    2,    4,    2,
    4,    2,    1,    2,    2,    4,    4,    6,    6,    1,
    3,    3,    3,    1,    3,    1,    3,    1,    1,    1,
    1,    6,    1,    1,    1,    1,    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  228,    0,   48,    0,   35,   36,
   33,    0,   27,    0,    0,   25,    0,   30,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   15,   23,
   22,    0,    0,   21,   56,  230,    0,  218,  219,  220,
  221,    0,    0,    0,    0,  203,    0,  178,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  167,    0,    0,    0,   68,    0,  103,    0,
    0,    0,    0,  131,    0,  138,    0,  168,  169,  170,
  171,  172,  173,  174,  175,    0,    0,    0,   49,   34,
   29,   26,    0,    0,    0,   50,    0,    0,    0,    0,
   56,   16,    0,    0,  179,    0,    0,    0,    0,  144,
    0,  204,    0,  205,    0,    0,  149,  195,  194,  152,
  155,  151,  163,  157,  150,  148,  153,  158,  160,  162,
  164,  143,  166,  154,  145,  146,  147,  156,  159,  161,
  165,  214,    0,    0,    0,    0,  229,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,   59,
    0,    0,   19,    0,    0,   43,    0,    0,   38,    0,
    0,    0,    0,  192,    0,    0,    0,    0,    0,    0,
  180,    0,  182,    0,  181,    0,   63,   69,    0,   84,
  101,   81,   82,   79,   78,   80,   77,   83,   72,   71,
   91,   74,   73,   98,   97,   90,   86,   94,   87,   89,
   88,   96,   95,  100,  102,   85,   75,   76,   92,   99,
   93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  135,  132,  133,  134,  141,  140,  139,  137,
  191,  193,    0,    0,    0,  184,  216,    0,    0,    0,
    0,    0,    0,   17,    0,   54,   51,   47,   44,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  215,  227,
    0,  186,  224,  225,  223,    0,  183,    0,  185,    0,
    0,    0,   61,   41,   57,    0,   56,   13,   42,    0,
    0,    0,  210,    0,  105,    0,  217,    0,    0,    0,
    0,   55,    0,    0,    0,    0,  209,    0,  222,    0,
    0,  188,  187,    0,    0,    0,  211,    0,    0,   14,
  190,  189,
  ]
  yydgoto := [                          2,
    3,   14,   43,   16,   44,   18,   19,   20,   21,   22,
   63,  136,  271,  112,  144,   23,   45,   51,   46,   35,
   36,   31,   32,   28,  148,   24,   47,  145,  146,  113,
  272,  114,  192,  116,  117,  118,  119,  120,  121,  122,
  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  193,  196,  368,  412,  413,  396,
  ]
  yysindex := [                      -210,
    0,    0,  -75,  -29,    0, -196, -110,  -50,  -38,  -50,
  -50,  -91,  -74,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -246, -248,    0, -158,    0, -133,    0,    0,
    0,  -95,    0, -138,  -78,    0,  -95,    0,  -71,  -70,
   42,   10, -149, -149,   46, -149,  -67,  452,    0,   60,
  -42,   75,  -50,   77,  -38,   79, -110,  -25,    0,    0,
    0, -330,   67,    0,    0,    0,  -28,    0,    0,    0,
    0,  452,  452,  452,  452,    0,  452,    0,  558,  452,
  452,  452,  452,  452,  558, -205,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  452,  452,
  452,   68,    0,   41,  -27,    1,    0, 5607,    0, -189,
  -84, -114, -180,    0, -278,    0, -297,    0,    0,    0,
    0,    0,    0,    0,    0, -136, -158,   79,    0,    0,
    0,    0,  -21,  -18, -134,    0, -133,  -16,   79,   79,
    0,    0, -136,   91,    0, -242,   41, -244, -140,    0,
   41,    0, -238,    0, -215, -214,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -250, -321,  -20,  -19,    0,  558,  452,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558, -219,  452,  452,  109, -212,  452,    0,    0,
  452, -110,    0,  -12,   -5,    0,   79,  -15,    0,  -10,
   -8, -136,  452,    0,  -14,  452,  452,  452,  452,  452,
    0,  452,    0,  452,    0,    1,    0,    0,   93,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
  -84,  -84,    0,  -84,  -84,  -84, -114, -114, -180, -180,
 -180, -180,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -234, -247, -222,    0,    0, -301, -288,   -3,
 -290,   89, -206,    0,   -6,    0,    0,    0,    0,    2,
  452,  102,  344,   41, -240,   41,   41,   41,    0,    0,
  558,    0,    0,    0,    0,  452,    0,  452,    0, -200,
  452,  452,    0,    0,    0,   19,    0,    0,    0,    8,
 -286, -139,    0,  452,    0, -291,    0,   15,   16,  -89,
  -81,    0, -136,  452,  452,  344,    0,   41,    0,  452,
  452,    0,    0,  452,   41,   41,    0,  -49,  -35,    0,
    0,    0,
  ]
  yyrindex := [                         9,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -113,    0,    0,   17,    0,  -98,    0,    0,
    0,   24,    0, -239,   39,    0,  146,    0,    0,    0,
    0,    0, -113, -113,  112, -113,    0, -255,    0,    0,
    0,    0,    0,    0,    0,   22,   25,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  653,    0,    0,    0,
    0, 5204,    0,    0,    0,    0,    0,    0,    0,    0,
 5204, 5204,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -34, -186,
 -131,    0,    0,  764,    0,  875,    0, 5310,    0, 5093,
 1874, 4094, 4205,    0, 4316,    0, 5421,    0,    0,    0,
    0,    0,    0,    0,    0,  227,   17,   22,    0,    0,
    0,    0, -193,    0,   26,    0,   27,    0,   22,   22,
    0,    0,  227,    0,    0,    0,  986, 1985,    0,    0,
 1097,    0, 2096,    0, 2207, 2318,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    7,    0,    0,    0, -255,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -34, -186,   29,    0,    0,    0,    0,
 -255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  227, -255,    0,    0,    0,    0,    0,    0,    0,
    0, -281,    0, -131,    0, 1208,    0,    0, 5526,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2429, 2540, 2651, 2762, 2873, 2984, 3095, 3206, 3317,
 3428, 3539,    0, 3650, 3761, 3872, 4427, 4538, 4649, 4760,
 4871, 4982,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -163,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -170,    0,    0,    0,    0,    0,
 -255,    0,    0, 1319, 3983, 1430, 1541, 1652,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -211,    0,    0,
  -34,  -34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  227,    0,    0,    0,    0, 1763,    0,  -34,
  -34,    0,    0, -255, -107, -101,    0,    0,    0,    0,
    0,    0,
  ]
  yygindex := [                         0,
  386,    0,  171,    0,  245,    0,    0,    0,    0,    0,
    0,  -64, -150, -195,  -22,    0,  197,  254,    0,    0,
  340,   18,  387,  -52,    0,    0,    0,    0,  119, -269,
    0,  -62,  -48,  202, 5767,    0, -194,    0,  804,   11,
   55,  -41,    0,    4,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -108,  108,    0,    0,  -23,    0,
  ]
$define YYTABLESIZE 6000
  yytable := [                        115,
  153,  194,  283,  297,  147,  376,  299,   48,  198,  198,
  156,  157,  158,  198,  159,   62,  263,  161,  259,  163,
  165,  166,   28,  155,  286,  400,   28,    7,   38,  414,
  288,  150,  162,  164,   28,   41,   28,  361,  151,   28,
   28,   13,  285,  292,  369,    1,   28,   28,   28,  293,
  343,  168,  198,  289,  290,  198,  418,  198,  362,  198,
   26,  198,  195,  398,  264,  370,  260,  169,  261,  262,
  140,  399,  265,  401,  266,  372,  267,  419,  403,  429,
  425,   64,  160,   64,  198,  198,  282,  382,  167,   64,
  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
  190,  191,  291,   64,  292,  274,  393,  255,  394,  395,
   49,  256,   42,  257,    7,   28,  280,  281,  392,  234,
  292,  381,   41,  235,  258,  236,  422,  237,   13,  238,
  268,  239,  292,  240,  269,  241,   27,  242,  397,  243,
  115,  244,  287,   64,  270,  363,  365,   20,   52,  198,
  245,   64,  405,   37,   20,   39,  246,   37,  247,   52,
  248,   52,   37,   15,   15,   37,   52,   37,   64,   37,
   37,   37,   40,   37,   64,  408,    5,   37,   37,   37,
    6,  251,   53,  252,   53,  253,  415,  254,    7,   53,
    8,   65,  364,    9,   10,  371,   29,   65,   50,   30,
   11,   12,   13,  353,  354,  355,  356,  367,   33,  373,
  360,   34,  115,  384,  385,  386,  387,  388,   54,  426,
  277,   52,   25,  427,  115,  278,    6,   64,  440,   60,
   61,   64,   64,  389,    7,  195,    8,   17,   17,    9,
   10,  375,   68,   69,   70,   71,   11,   12,   13,  347,
  348,  212,  357,  358,  359,  212,  249,  213,  250,   53,
    2,  213,  434,  432,    2,  292,   68,   69,   70,   71,
   59,  433,    2,  292,    2,   31,   55,    2,    2,   31,
   56,   57,  420,  421,    2,    2,    2,   31,   58,   31,
   24,   65,   31,   31,   24,  349,  350,  351,  352,   31,
   31,   31,   24,  441,   24,  292,  137,   24,   24,  138,
  411,  438,  439,   62,   24,   24,   24,  442,   64,  292,
   64,  139,  115,  416,  141,  143,  149,  152,  197,  154,
  198,  199,  423,  200,  276,  275,  279,  284,  294,  417,
  374,  428,  379,  295,  380,  378,  391,  383,  402,  404,
  406,  435,  436,  411,   66,   67,   68,   69,   70,   71,
  407,   72,  409,   73,  424,   74,  430,  431,   18,  226,
   75,   76,   12,   77,   45,  115,    4,   39,   46,   40,
  273,   78,   79,   64,  142,  377,   37,   80,   81,  296,
   82,  390,  437,   83,   84,   85,    0,   32,   86,    0,
   87,   32,   88,    0,   89,    0,   90,    0,   91,   32,
   92,   32,   93,   94,   32,   32,    0,    0,    0,    0,
    0,   32,   32,   32,    0,    0,    0,   95,    0,   96,
    0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,    0,   99,    0,  100,  101,    0,  102,  103,
    0,  104,    0,  105,  106,    0,  107,    0,  108,    0,
  109,    0,    0,    0,    0,    0,    0,    0,  110,    0,
  111,  366,   60,   60,   60,   60,   60,   60,    0,   60,
    0,   60,    0,   60,    0,    0,    0,   60,   60,   60,
    0,   60,    0,    0,    0,    0,    0,    0,    0,   60,
   60,    0,    0,    0,    0,   60,   60,    0,   60,    0,
    0,   60,   60,   60,    0,    0,   60,    0,   60,    0,
   60,    0,   60,    0,   60,    0,   60,    0,   60,    0,
   60,   60,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   60,    0,   60,    0,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
    0,   60,    0,   60,   60,    0,   60,   60,    0,   60,
    0,   60,   60,    0,   60,    0,   60,    0,   60,    0,
    0,    0,    0,    0,    0,   60,   60,    0,   60,   66,
   67,   68,   69,   70,   71,    0,   72,    0,   73,    0,
   74,  410,    0,    0,    0,   75,   76,    0,   77,    0,
    0,    0,    0,    0,    0,    0,   78,   79,    0,    0,
    0,    0,   80,   81,    0,   82,    0,    0,   83,   84,
   85,    0,    0,   86,    0,   87,    0,   88,    0,   89,
    0,   90,    0,   91,    0,   92,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   95,    0,   96,    0,   97,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   98,    0,   99,    0,
  100,  101,    0,  102,  103,    0,  104,    0,  105,  106,
    0,  107,    0,  108,    0,  109,    0,   66,   67,   68,
   69,   70,   71,  110,   72,  111,   73,    0,   74,    0,
    0,    0,    0,   75,   76,    0,   77,    0,    0,    0,
    0,    0,    0,    0,   78,   79,    0,    0,    0,    0,
   80,   81,    0,   82,    0,    0,   83,   84,   85,    0,
    0,   86,    0,   87,    0,   88,    0,   89,    0,   90,
    0,   91,    0,   92,    0,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   95,    0,   96,    0,   97,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,    0,   99,    0,  100,  101,
    0,  102,  103,    0,  104,    0,  105,  106,    0,  107,
    0,  108,    0,  109,   67,   68,   69,   70,   71,    0,
   72,  110,   73,  111,   74,    0,    0,    0,    0,   75,
   76,    0,   77,    0,    0,    0,    0,    0,    0,    0,
   78,   79,    0,    0,    0,    0,   80,   81,    0,   82,
    0,    0,   83,   84,   85,    0,    0,   86,    0,   87,
    0,   88,    0,   89,    0,   90,    0,   91,    0,   92,
    0,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   95,    0,   96,    0,
   97,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   98,    0,   99,    0,  100,  101,    0,  102,  103,    0,
  104,    0,  105,  106,    0,  107,  177,  108,    0,  109,
    0,  177,  177,    0,    0,    0,    0,  110,    0,  111,
    0,    0,    0,    0,    0,    0,    0,  177,    0,    0,
    0,    0,    0,    0,    0,  177,  177,    0,    0,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,    0,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
    0,  177,  177,  177,  177,  177,  177,   65,    0,    0,
    0,    0,   65,   65,    0,    0,    0,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,   65,  344,
  345,  346,    0,    0,    0,    0,   65,   65,    0,    0,
   65,   65,   65,    0,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,    0,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,    0,   65,   65,   65,   65,   65,   65,   66,    0,
    0,    0,    0,   66,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
    0,    0,    0,    0,    0,    0,    0,   66,   66,    0,
    0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,    0,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,    0,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,    0,   66,   66,   66,   66,   66,   66,  176,
    0,    0,    0,    0,  176,  176,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  176,    0,    0,    0,    0,    0,    0,    0,  176,  176,
    0,    0,  176,  176,  176,    0,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
    0,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,    0,  176,  176,  176,  176,  176,  176,
  202,    0,    0,    0,    0,  202,  202,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  202,    0,    0,    0,    0,    0,    0,    0,  202,
  202,    0,    0,  202,  202,  202,    0,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,    0,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,    0,  202,  202,  202,  202,  202,
  202,   67,    0,    0,    0,    0,   67,   67,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
   67,   67,    0,    0,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    0,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,    0,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,    0,   67,   67,   67,   67,
   67,   67,  201,    0,    0,    0,    0,  201,  201,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,  201,  201,    0,    0,  201,  201,  201,    0,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,    0,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,    0,  201,  201,  201,
  201,  201,  201,  206,    0,    0,    0,    0,  206,  206,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,    0,    0,    0,    0,    0,
    0,    0,  206,  206,    0,    0,  206,  206,  206,    0,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,    0,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,    0,  206,  206,
  206,  206,  206,  206,  199,    0,    0,    0,    0,  199,
  199,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  199,    0,    0,    0,    0,
    0,    0,    0,  199,  199,    0,    0,  199,  199,  199,
    0,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,    0,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,    0,  199,
  199,  199,  199,  199,  199,  197,    0,    0,    0,    0,
  197,  197,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  197,    0,    0,    0,
    0,    0,    0,    0,  197,  197,    0,    0,  197,  197,
  197,    0,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,    0,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,    0,
  197,  197,  197,  197,  197,  197,  208,    0,    0,    0,
    0,  208,  208,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  208,    0,    0,
    0,    0,    0,    0,    0,  208,  208,    0,    0,  208,
  208,  208,    0,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,    0,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
    0,  208,  208,  208,  208,  208,  208,  108,    0,    0,
    0,    0,  108,  108,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,    0,
    0,    0,    0,    0,    0,    0,  108,  108,    0,    0,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,    0,  108,    0,  108,    0,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,    0,  108,  108,  108,  108,  108,  108,  200,    0,
    0,    0,    0,    0,  200,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  200,
    0,    0,    0,    0,    0,    0,    0,  200,  200,    0,
    0,  200,  200,  200,    0,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,    0,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,    0,  200,  200,  200,  200,  200,  200,   65,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   65,    0,    0,    0,    0,    0,    0,    0,   65,   65,
    0,    0,   65,   65,   65,    0,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
    0,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,    0,   65,   65,   65,   65,   65,   65,
  198,    0,    0,    0,    0,    0,  198,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  198,    0,    0,    0,    0,    0,    0,    0,  198,
  198,    0,    0,  198,  198,  198,    0,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,    0,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,    0,  198,  198,  198,  198,  198,
  198,  196,    0,    0,    0,    0,    0,  196,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  196,    0,    0,    0,    0,    0,    0,    0,
  196,  196,    0,    0,  196,  196,  196,    0,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,    0,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,    0,  196,  196,  196,  196,
  196,  196,  119,    0,    0,    0,    0,  119,  119,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  119,    0,    0,    0,    0,    0,    0,
    0,  119,  119,    0,    0,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,    0,
  119,    0,  119,    0,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,    0,  119,  119,  119,
  119,  119,  119,  113,    0,    0,    0,    0,  113,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  113,    0,    0,    0,    0,    0,
    0,    0,  113,  113,    0,    0,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
    0,  113,    0,  113,    0,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,    0,  113,  113,
  113,  113,  113,  113,  112,    0,    0,    0,    0,  112,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
    0,    0,    0,  112,  112,    0,    0,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,    0,  112,    0,  112,    0,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,    0,  112,
  112,  112,  112,  112,  112,  118,    0,    0,    0,    0,
  118,  118,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  118,    0,    0,    0,
    0,    0,    0,    0,  118,  118,    0,    0,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,    0,  118,    0,  118,    0,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
  118,  118,  118,  118,  118,  118,  115,    0,    0,    0,
    0,  115,  115,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
    0,    0,    0,    0,    0,  115,  115,    0,    0,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,    0,  115,    0,  115,    0,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
    0,  115,  115,  115,  115,  115,  115,  109,    0,    0,
    0,    0,  109,  109,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  109,    0,
    0,    0,    0,    0,    0,    0,  109,  109,    0,    0,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,    0,  109,    0,  109,    0,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,    0,  109,  109,  109,  109,  109,  109,  121,    0,
    0,    0,    0,  121,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  121,
    0,    0,    0,    0,    0,    0,    0,  121,  121,    0,
    0,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,    0,  121,    0,  121,    0,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,    0,  121,  121,  121,  121,  121,  121,  117,
    0,    0,    0,    0,  117,  117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,    0,  117,  117,
    0,    0,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,    0,  117,    0,  117,
    0,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,    0,  117,  117,  117,  117,  117,  117,
  116,    0,    0,    0,    0,  116,  116,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,    0,    0,    0,  116,
  116,    0,    0,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,    0,  116,    0,
  116,    0,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,    0,  116,  116,  116,  116,  116,
  116,  111,    0,    0,    0,    0,  111,  111,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
  111,  111,    0,    0,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,    0,  111,
    0,  111,    0,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,    0,  111,  111,  111,  111,
  111,  111,  110,    0,    0,    0,    0,  110,  110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,    0,    0,
    0,  110,  110,    0,    0,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,    0,
  110,    0,  110,    0,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,    0,  110,  110,  110,
  110,  110,  110,  120,    0,    0,    0,    0,  120,  120,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
    0,    0,  120,  120,    0,    0,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
    0,  120,    0,  120,    0,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,    0,  120,  120,
  120,  120,  120,  120,  114,    0,    0,    0,    0,  114,
  114,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
    0,    0,    0,  114,  114,    0,    0,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,    0,  114,    0,  114,    0,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,    0,  114,
  114,  114,  114,  114,  114,  122,    0,    0,    0,    0,
  122,  122,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
    0,    0,    0,    0,  122,  122,    0,    0,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,    0,  122,    0,  122,    0,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,    0,
  122,  122,  122,  122,  122,  122,  207,    0,    0,    0,
    0,  207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  207,    0,    0,
    0,    0,    0,    0,    0,  207,  207,    0,    0,  207,
  207,  207,    0,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,    0,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
    0,  207,  207,  207,  207,  207,  207,  123,    0,    0,
    0,    0,  123,  123,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
    0,    0,    0,    0,    0,    0,  123,  123,    0,    0,
  123,  123,  123,  123,  123,  123,  123,  123,  123,    0,
  123,    0,  123,    0,  123,    0,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,    0,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,    0,  123,  123,  123,  123,  123,  123,  126,    0,
    0,    0,    0,  126,  126,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
    0,    0,    0,    0,    0,    0,    0,  126,  126,    0,
    0,  126,    0,  126,  126,  126,    0,  126,    0,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,    0,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,    0,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,    0,  126,  126,  126,  126,  126,  126,  136,
    0,    0,    0,    0,  136,  136,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  136,    0,    0,    0,    0,    0,    0,    0,  136,  136,
    0,    0,    0,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
    0,  136,    0,    0,  136,  136,  136,  136,  136,  136,
    0,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,    0,  136,  136,  136,  136,  136,  136,
  124,    0,    0,    0,    0,  124,  124,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  124,    0,    0,    0,    0,    0,    0,    0,  124,
  124,    0,    0,  124,  124,  124,  124,  124,  124,  124,
  124,  124,    0,  124,    0,  124,    0,  124,    0,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,    0,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,    0,  124,  124,  124,  124,  124,
  124,  125,    0,    0,    0,    0,  125,  125,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  125,    0,    0,    0,    0,    0,    0,    0,
  125,  125,    0,    0,  125,  125,  125,  125,  125,  125,
  125,  125,  125,    0,  125,    0,  125,    0,  125,    0,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,    0,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,    0,  125,  125,  125,  125,
  125,  125,  127,    0,    0,    0,    0,  127,  127,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
    0,  127,  127,    0,    0,  127,    0,  127,  127,  127,
    0,  127,    0,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,    0,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,    0,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,    0,  127,  127,  127,
  127,  127,  127,  129,    0,    0,    0,    0,  129,  129,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  129,    0,    0,    0,    0,    0,
    0,    0,  129,  129,    0,    0,  129,    0,  129,  129,
  129,    0,  129,    0,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,    0,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,    0,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,    0,  129,  129,
  129,  129,  129,  129,  130,    0,    0,    0,    0,  130,
  130,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  130,    0,    0,    0,    0,
    0,    0,    0,  130,  130,    0,    0,  130,    0,  130,
  130,  130,    0,  130,    0,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,    0,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,    0,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,    0,  130,
  130,  130,  130,  130,  130,  128,    0,    0,    0,    0,
  128,  128,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  128,    0,    0,    0,
    0,    0,    0,    0,  128,  128,    0,    0,  128,    0,
  128,  128,  128,    0,  128,    0,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,    0,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,    0,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,    0,
  128,  128,  128,  128,  128,  128,  106,    0,    0,    0,
    0,  106,  106,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  106,    0,    0,
    0,    0,    0,    0,    0,  106,  106,    0,    0,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,    0,  106,  106,  106,    0,  106,    0,  106,    0,
  106,    0,  106,    0,  106,    0,  106,    0,  106,    0,
  106,    0,  106,    0,  106,  106,  106,  106,  106,  106,
  106,  106,    0,  106,  106,  106,  106,    0,    0,  106,
    0,  106,    0,  106,  106,  106,  106,  106,  106,  106,
    0,  106,  106,  106,  106,  106,  106,   64,    0,    0,
    0,    0,   64,   64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,   64,   64,    0,    0,
    0,   64,   64,    0,   64,    0,   64,    0,   64,    0,
   64,    0,   64,    0,   64,    0,   64,    0,    0,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,    0,   64,    0,   64,    0,   64,   64,   64,
   64,   64,   64,   64,   64,   64,    0,   64,    0,   64,
    0,    0,   64,    0,    0,   64,    0,   64,    0,    0,
   64,    0,   64,    0,   64,    0,   64,   64,   64,   64,
   64,    0,   64,   70,   64,    0,   64,   64,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
    0,    0,   70,    0,    0,    0,   70,   70,    0,   70,
    0,   70,    0,   70,    0,   70,    0,   70,    0,   70,
    0,   70,    0,   70,   70,    0,    0,    0,   70,    0,
    0,    0,   70,    0,   70,    0,   70,    0,   70,    0,
   70,    0,   70,    0,   70,    0,   70,    0,   70,    0,
   70,    0,   70,    0,   70,    0,   70,   70,    0,   70,
   70,    0,   70,    0,    0,   70,    0,   70,    0,   70,
    0,   70,   70,   70,   70,   70,   70,    0,   70,   70,
   70,   70,   70,   70,  142,    0,    0,    0,    0,  142,
  142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
    0,    0,    0,  142,  142,    0,    0,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,    0,  142,  142,  142,  142,
  142,  142,    0,  142,  142,  142,  142,  142,    0,  142,
    0,  142,    0,  142,  104,  104,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,    0,  104,  104,
    0,    0,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
    0,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,    0,  104,  104,  104,  104,  104,  104,
  201,    0,    0,    0,    0,  202,    0,  203,    0,  204,
    0,  205,    0,  206,    0,  207,    0,  208,    0,  209,
    0,    0,  210,  211,  212,    0,  213,  214,  215,    0,
  216,    0,  217,    0,  218,    0,  219,    0,  220,    0,
  221,    0,  222,    0,  223,    0,  224,    0,  225,    0,
  226,    0,  227,    0,    0,  228,    0,    0,  229,    0,
  230,    0,    0,  231,    0,  232,  298,  233,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  ]
  yycheck := [                         48,
   65,  110,  153,  199,   57,  275,  201,  256,  300,  300,
   73,   74,   75,  300,   77,  271,  314,   80,  297,   82,
   83,   84,  262,   72,  269,  314,  266,  274,   11,  270,
  269,  362,   81,   82,  274,  282,  276,  257,  369,  279,
  280,  288,  285,  365,  257,  256,  286,  287,  288,  371,
  245,  257,  300,  269,  269,  300,  257,  300,  278,  300,
  257,  300,  111,  365,  362,  278,  345,  273,  347,  348,
   53,  373,  370,  362,  372,  271,  374,  278,  369,  371,
  367,  363,   79,  365,  300,  300,  151,  283,   85,  371,
   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
  107,  108,  363,  369,  365,  138,  364,  298,  366,  367,
  369,  302,  369,  304,  274,  365,  149,  150,  363,  319,
  365,  282,  282,  323,  315,  325,  406,  327,  288,  329,
  277,  331,  365,  333,  281,  335,  257,  337,  371,  339,
  199,  341,  293,  365,  291,  264,  265,  271,  365,  300,
  350,  373,  369,  262,  278,  257,  356,  266,  358,  363,
  360,  365,  271,    3,    4,  274,  370,  276,  365,  278,
  279,  280,  257,  282,  371,  381,  262,  286,  287,  288,
  266,  306,  363,  308,  365,  310,  391,  312,  274,  370,
  276,  365,  265,  279,  280,  268,  257,  371,  367,  260,
  286,  287,  288,  255,  256,  257,  258,  266,  257,  272,
  262,  260,  271,  286,  287,  288,  289,  290,  367,  369,
  365,  365,  262,  373,  283,  370,  266,  369,  434,   43,
   44,  373,   46,  292,  274,  294,  276,    3,    4,  279,
  280,  257,  258,  259,  260,  261,  286,  287,  288,  249,
  250,  369,  259,  260,  261,  373,  351,  369,  353,  365,
  262,  373,  423,  363,  266,  365,  258,  259,  260,  261,
  271,  363,  274,  365,  276,  262,  365,  279,  280,  266,
  362,  362,  401,  402,  286,  287,  288,  274,  257,  276,
  262,  369,  279,  280,  266,  251,  252,  253,  254,  286,
  287,  288,  274,  363,  276,  365,  257,  279,  280,  362,
  383,  430,  431,  278,  286,  287,  288,  363,  363,  365,
  365,  257,  381,  396,  258,  257,  362,  271,  271,  368,
  300,  369,  407,  343,  363,  367,  363,  257,  369,  398,
  363,  414,  363,  373,  363,  371,  264,  372,  362,  271,
  367,  424,  425,  426,  256,  257,  258,  259,  260,  261,
  369,  263,  271,  265,  367,  267,  362,  362,  362,  373,
  272,  273,  271,  275,  363,  434,    1,  363,  363,  363,
  137,  283,  284,  365,   55,  277,   10,  289,  290,  198,
  292,  294,  426,  295,  296,  297,   -1,  262,  300,   -1,
  302,  266,  304,   -1,  306,   -1,  308,   -1,  310,  274,
  312,  276,  314,  315,  279,  280,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,   -1,   -1,   -1,  329,   -1,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,   -1,  345,   -1,  347,  348,   -1,  350,  351,
   -1,  353,   -1,  355,  356,   -1,  358,   -1,  360,   -1,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,
  372,  373,  256,  257,  258,  259,  260,  261,   -1,  263,
   -1,  265,   -1,  267,   -1,   -1,   -1,  271,  272,  273,
   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,
  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  292,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,
  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,
   -1,  345,   -1,  347,  348,   -1,  350,  351,   -1,  353,
   -1,  355,  356,   -1,  358,   -1,  360,   -1,  362,   -1,
   -1,   -1,   -1,   -1,   -1,  369,  370,   -1,  372,  256,
  257,  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,
  267,  268,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  292,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,  306,
   -1,  308,   -1,  310,   -1,  312,   -1,  314,  315,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,
  347,  348,   -1,  350,  351,   -1,  353,   -1,  355,  356,
   -1,  358,   -1,  360,   -1,  362,   -1,  256,  257,  258,
  259,  260,  261,  370,  263,  372,  265,   -1,  267,   -1,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,  292,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,   -1,  314,  315,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,  347,  348,
   -1,  350,  351,   -1,  353,   -1,  355,  356,   -1,  358,
   -1,  360,   -1,  362,  257,  258,  259,  260,  261,   -1,
  263,  370,  265,  372,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  292,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  343,   -1,  345,   -1,  347,  348,   -1,  350,  351,   -1,
  353,   -1,  355,  356,   -1,  358,  264,  360,   -1,  362,
   -1,  269,  270,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  285,  246,
  247,  248,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,   -1,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
   -1,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,   -1,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,   -1,
  352,   -1,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,   -1,  352,   -1,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,   -1,  352,
   -1,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,   -1,
  352,   -1,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,   -1,  299,  300,  301,   -1,  303,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,   -1,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
   -1,  346,   -1,   -1,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,  301,
   -1,  303,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,   -1,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,
  301,   -1,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,   -1,  299,
  300,  301,   -1,  303,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,   -1,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,   -1,
  299,  300,  301,   -1,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,  320,  321,  322,   -1,  324,   -1,  326,   -1,
  328,   -1,  330,   -1,  332,   -1,  334,   -1,  336,   -1,
  338,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,   -1,  351,  352,  353,  354,   -1,   -1,  357,
   -1,  359,   -1,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
   -1,  298,  299,   -1,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,   -1,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,   -1,  330,   -1,  332,   -1,  334,  335,  336,
  337,  338,  339,  340,  341,  342,   -1,  344,   -1,  346,
   -1,   -1,  349,   -1,   -1,  352,   -1,  354,   -1,   -1,
  357,   -1,  359,   -1,  361,   -1,  363,  364,  365,  366,
  367,   -1,  369,  264,  371,   -1,  373,  374,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,   -1,   -1,   -1,  297,  298,   -1,  300,
   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,
   -1,  312,   -1,  314,  315,   -1,   -1,   -1,  319,   -1,
   -1,   -1,  323,   -1,  325,   -1,  327,   -1,  329,   -1,
  331,   -1,  333,   -1,  335,   -1,  337,   -1,  339,   -1,
  341,   -1,  343,   -1,  345,   -1,  347,  348,   -1,  350,
  351,   -1,  353,   -1,   -1,  356,   -1,  358,   -1,  360,
   -1,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,   -1,  363,  364,  365,  366,  367,   -1,  369,
   -1,  371,   -1,  373,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,   -1,  316,  317,  318,   -1,  320,  321,  322,   -1,
  324,   -1,  326,   -1,  328,   -1,  330,   -1,  332,   -1,
  334,   -1,  336,   -1,  338,   -1,  340,   -1,  342,   -1,
  344,   -1,  346,   -1,   -1,  349,   -1,   -1,  352,   -1,
  354,   -1,   -1,  357,   -1,  359,  200,  361,  202,  203,
  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 374
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","DEFAULT",
"DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"cl : classhead SEMICOL END",
"cl : classhead methods initiallysection END",
"classhead : CLASS IDENT supers LPAREN arglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"locals :",
"locals : locals retention idlist SEMICOL",
"retention : LOCAL",
"retention : STATIC",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2",
"expr1 : expr2 SWAP expr1",
"expr1 : expr2 ASSIGN expr1",
"expr1 : expr2 REVSWAP expr1",
"expr1 : expr2 REVASSIGN expr1",
"expr1 : expr2 AUGCONCAT expr1",
"expr1 : expr2 AUGLCONCAT expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGNMEQ expr1",
"expr1 : expr2 AUGEQUIV expr1",
"expr1 : expr2 AUGNMGE expr1",
"expr1 : expr2 AUGNMGT expr1",
"expr1 : expr2 AUGNMLE expr1",
"expr1 : expr2 AUGNMLT expr1",
"expr1 : expr2 AUGNMNE expr1",
"expr1 : expr2 AUGNEQUIV expr1",
"expr1 : expr2 AUGSEQ expr1",
"expr1 : expr2 AUGSGE expr1",
"expr1 : expr2 AUGSGT expr1",
"expr1 : expr2 AUGSLE expr1",
"expr1 : expr2 AUGSLT expr1",
"expr1 : expr2 AUGSNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr1 : expr2 AUGAT expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : CREATE expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : IDENT COLONCOLON IDENT",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 602 "unigram.y"

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then
       return node("Paren",lparen,node("invoke",
	  Field(Field(n1, ".", "__m"), "." , args[3]),
	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
   else return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

#
# check whether x is the name of a function that is accidentally being
# assgined.  if it is, issue a warning unless a flag has been set.
#
procedure ckfnasgn(x)

if type(x)=="token" & proc(x.s, 0) then
   warning("Warning: assignment to built-in function "|| x.s)
return x
end
#line 1982 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 231 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 233 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 234 "unigram.y"

	   if yynerrs = 0 then iwrites(&errout,".");
	   yyval := node("decls", valstk[2], valstk[1])
	      
end

procedure action_12()
#line 249 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 250 "unigram.y"

	   yyval := Method( , , , , "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 256 "unigram.y"

	   yyval := Method( , , , , "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 264 "unigram.y"

   yyval := valstk[3];
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_16()
#line 268 "unigram.y"

   yyval := valstk[4];
   if valstk[2] ~=== EmptyNode then
      valstk[3] := node("methods", valstk[2], valstk[3])
   yyval.methods := methodstaque(valstk[3], yyval)
   
end

procedure action_17()
#line 275 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.name := valstk[5].s
   classes.insert(yyval, yyval.name)
   yyval.supers := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_18()
#line 286 "unigram.y"
 yyval := idTaque(":") 
end

procedure action_19()
#line 287 "unigram.y"
 yyval := valstk[1]; taque_Push(yyval, valstk[2].s) 
end

procedure action_20()
#line 290 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 291 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_22()
#line 292 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_23()
#line 293 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_24()
#line 296 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_26()
#line 299 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_29()
#line 303 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_30()
#line 305 "unigram.y"

   if \thePackage then {
      yyerror(fName || " cannot be in both package "|| thePackage.name ||
	      " and package " || valstk[1].s)
      yyval := EmptyNode
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package( , valstk[1].s)
      thePackage.insertfname(fName)
      }
   
end

procedure action_31()
#line 318 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_32()
#line 323 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_34()
#line 326 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_37()
#line 331 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_38()
#line 333 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		
end

procedure action_39()
#line 337 "unigram.y"
 yyval := EmptyNode 
end

procedure action_41()
#line 340 "unigram.y"

		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_42()
#line 345 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_43()
#line 352 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		
end

procedure action_44()
#line 356 "unigram.y"

		yyval := Method( , , , , valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_45()
#line 360 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_46()
#line 361 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_47()
#line 362 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_49()
#line 366 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_51()
#line 369 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_53()
#line 372 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_54()
#line 373 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_55()
#line 374 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_56()
#line 376 "unigram.y"
 yyval := EmptyNode;
end

procedure action_57()
#line 377 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_60()
#line 382 "unigram.y"
 yyval := EmptyNode 
end

procedure action_61()
#line 383 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_62()
#line 387 "unigram.y"
 yyval := EmptyNode 
end

procedure action_63()
#line 388 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_64()
#line 390 "unigram.y"
 yyval := EmptyNode 
end

procedure action_67()
#line 394 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_69()
#line 397 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_71()
#line 400 "unigram.y"
 yyval := node("swap", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_72()
#line 401 "unigram.y"
 yyval := node("assign", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_73()
#line 402 "unigram.y"
 yyval := node("revswap", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_74()
#line 403 "unigram.y"
 yyval := node("revasgn", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_75()
#line 404 "unigram.y"
 yyval := node("augcat", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_76()
#line 405 "unigram.y"
 yyval := node("auglcat", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_77()
#line 406 "unigram.y"
 yyval := node("Bdiffa", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_78()
#line 407 "unigram.y"
 yyval := node("Buniona", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_79()
#line 408 "unigram.y"
 yyval := node("Bplusa", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_80()
#line 409 "unigram.y"
 yyval := node("Bminusa", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_81()
#line 410 "unigram.y"
 yyval := node("Bstara", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_82()
#line 411 "unigram.y"
 yyval := node("Bintera", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_83()
#line 412 "unigram.y"
 yyval := node("Bslasha", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_84()
#line 413 "unigram.y"
 yyval := node("Bmoda", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_85()
#line 414 "unigram.y"
 yyval := node("Bcareta", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_86()
#line 415 "unigram.y"
 yyval := node("Baugeq", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_87()
#line 416 "unigram.y"
 yyval := node("Baugeqv", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_88()
#line 417 "unigram.y"
 yyval := node("Baugge", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_89()
#line 418 "unigram.y"
 yyval := node("Bauggt", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_90()
#line 419 "unigram.y"
 yyval := node("Baugle", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_91()
#line 420 "unigram.y"
 yyval := node("Bauglt", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_92()
#line 421 "unigram.y"
 yyval := node("Baugne", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_93()
#line 422 "unigram.y"
 yyval := node("Baugneqv", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_94()
#line 423 "unigram.y"
 yyval := node("Baugseq", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_95()
#line 424 "unigram.y"
 yyval := node("Baugsge", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_96()
#line 425 "unigram.y"
 yyval := node("Baugsgt", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_97()
#line 426 "unigram.y"
 yyval := node("Baugsle", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_98()
#line 427 "unigram.y"
 yyval := node("Baugslt", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_99()
#line 428 "unigram.y"
 yyval := node("Baugsne", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_100()
#line 429 "unigram.y"
 yyval := node("Baugques", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_101()
#line 430 "unigram.y"
 yyval := node("Baugamper", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_102()
#line 431 "unigram.y"
 yyval := node("Baugact", ckfnasgn(valstk[3]),valstk[2],valstk[1]);
end

procedure action_104()
#line 434 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 435 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 438 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 441 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 442 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 443 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 444 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 445 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 446 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 447 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 448 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 449 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 450 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 451 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 452 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 453 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 454 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 457 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 458 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 461 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 462 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_129()
#line 463 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 464 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 467 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_133()
#line 468 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 469 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_135()
#line 470 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_137()
#line 473 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 476 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 477 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]) 
end

procedure action_141()
#line 478 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 481 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_144()
#line 482 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_145()
#line 483 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_146()
#line 484 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_147()
#line 485 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_148()
#line 486 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_149()
#line 487 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_150()
#line 488 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_151()
#line 489 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_152()
#line 490 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_153()
#line 491 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_154()
#line 492 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_155()
#line 493 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_156()
#line 494 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_157()
#line 495 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_158()
#line 496 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_159()
#line 497 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_160()
#line 498 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_161()
#line 499 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_162()
#line 500 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_163()
#line 501 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_164()
#line 502 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_165()
#line 503 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_166()
#line 504 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_176()
#line 515 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_178()
#line 517 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_179()
#line 518 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_180()
#line 519 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_181()
#line 520 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_182()
#line 521 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_183()
#line 522 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_184()
#line 523 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_185()
#line 524 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_186()
#line 525 "unigram.y"
 yyval := node("invoke", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_187()
#line 526 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_188()
#line 529 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_189()
#line 532 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_190()
#line 535 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_191()
#line 538 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]);
end

procedure action_192()
#line 539 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]);
end

procedure action_193()
#line 540 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]);
end

procedure action_194()
#line 541 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]);
end

procedure action_195()
#line 542 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]);
end

procedure action_196()
#line 544 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_197()
#line 545 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_198()
#line 547 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_199()
#line 548 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_200()
#line 550 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_201()
#line 551 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_202()
#line 553 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_204()
#line 556 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_205()
#line 557 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_206()
#line 558 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_207()
#line 560 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_208()
#line 561 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_209()
#line 563 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_211()
#line 566 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_212()
#line 568 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_213()
#line 569 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_215()
#line 572 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_216()
#line 580 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_217()
#line 581 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_222()
#line 588 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_227()
#line 595 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_229()
#line 598 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_230()
#line 599 "unigram.y"
 yyval := node("error"); 
end

#line 3091 "unigram.icn"
