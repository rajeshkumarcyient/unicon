############################################################################
#
#	File:     gallery.icn
#
#	Subject:  Program to display many .gif/.xpm files at once
#
#	Author:   Gregg M. Townsend
#
#	Date:     August 1, 1996
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  Usage:  gallery [-{gc}n] [-{whs}nnn] [-{rmtud}] file...
#
#  Gallery displays multiple image files in a single window.  GIF and
#  XPM formats are always supported.  Raw-mode PPM files are supported
#  if the loadfunc() library is available.  JPEG, PPM, and RLE formats
#  are also available under Unix if the necessary conversion utilities
#  are available in the job's search path.
#
#  When the window fills, a circle in the lower right corner indicates
#  that you can press return for the next window.  A square appears there
#  when there are no more images; press Q to exit.
#
#  -cn or -gn selects the color palette used; -c6 is the default.
#  (However, -g30 may look better even for color images.)
#
#  -wnnn sets the maximum width for displaying an image;
#  -hnnn sets the maximum height.  -snnn sets both.
#  By default, sizes are set to fit all images in a single window.
#
#  -r arranges images in rows instead of columns.
#  -m maximizes the window size before displaying images.
#  -t trims file names of leading path components and extensions.
#  -u shows images completely unlabeled.
#  -d prints some debugging information.
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################
#
#  Links: graphics, imscolor, options, io, random, cfunc
#
############################################################################


link graphics
link imscolor
link options
link io
link random

$undef _DYNAMIC_LOADING		# delete this to enable direct PPM reading

$ifdef _DYNAMIC_LOADING
link cfunc
$endif


$define DefPalette "c6"		# default palette
$define Gap 4			# gap between images

$define MinWidth 32		# minimum width if auto-scaled
$define MinHeight 32		# minimum height if auto-scaled


global opts			# command options
global tempname			# temporary file name

global pal			# selected palette (if any)

global ww, wh, fh, fw		# window dimensions
global maxw, maxh		# maximum size of displayed image



procedure main(args)
   local cw, ch, bigh, bigw, x, y, w, h, aspr, aspmax, horz
   local fname, f, tw, s, nchars, nlines, imwin

   # generate a random name for the temporary file
   randomize()
   tempname := "/tmp/gal" || right(?99999, 5, "0") || ".tmp"

   # open the window and process options
   Window("size=800,500", "bg=grayish-white", "font=sans,8", args)
   opts := options(args, "g+c+w+h+s+rmtud")
   if \opts["m"] then
      WAttrib("canvas=maximal")
   if *args = 0 then
      stop("usage: ", &progname, " [-{gc}n] [-{whd}nnn] [-{mtv}] file...")

   # allow user resizing of window
   &error := 1
   WAttrib("resize=on")
   &error := 0

   # record window dimensions
   ww := WAttrib("width")
   wh := WAttrib("height")
   if \opts["u"] then
      fh := 0
   else
      fh := WAttrib("fheight")
   fw := WAttrib("fwidth")
   maxw := \opts["w"] | \opts["s"] | 2 * \opts["h"]
   maxh := \opts["h"] | \opts["s"] | 2 * \opts["w"]

   # If no image size specified, try to guess to fill the window
   if /maxw then
      layout(*args)

   aspmax := real(maxw) / real(maxh)

   pal := ("c" || \opts["c"]) | ("g" || \opts["g"]) | DefPalette
   PaletteChars(pal) | stop("invalid palette ", pal)

   # Display the files.
   x := y := Gap
   bigw := bigh := 0
   every fname := !args do {

      close(\f)
      close(\imwin)
      f := imwin := &null

      # Check for an interrupt
      while *Pending() > 0 do
         if Event() === QuitEvents() then
            return

      # Get the next file and translate its image.
      f := open(fname) |
         { write(&errout, fname, ": can't open"); next }

      # Read the image, full sized, into a scratch canvas
      if not (imwin := rdimage(fname, f)) then
	 { write(&errout, fname, ": can't decode"); next }

      # Scale the image to the desired size
      w := WAttrib(imwin, "width")
      h := WAttrib(imwin, "height")
      aspr := real(w) / real(h)
      if w > maxw | h > maxh then {
         if aspr > aspmax then {
	    w := maxw
            h := maxw / aspr
	    }
         else {
            w := maxh * aspr
	    h := maxh
	    }
	 w <:= 1
	 h <:= 1
         Zoom(imwin, , , , , , , w, h)
         }

      # Trim the file name if so requested.
      if \opts["t"] then
         fname ? {
            while tab(upto('/') + 1)
            ="cache"
            fname := tab(upto('.') | 0)
            }

      # Calculate the area needed for display
      cw := w					# cell width
      if /opts["u"] then
         cw <:= TextWidth(fname)		# ensure room for label
      ch := h + fh				# cell height

      # Place the new image on a new row or new window if needed.
      if x + cw > ww | y + ch > wh then {	# if row or column is full

	 if /opts["r"] then {
            x +:= bigw + Gap			# start new column
            y := Gap
	    bigw := 0
	    }
	 else {
            x := Gap				# start new row
            y +:= bigh + Gap
	    bigh := 0
	    }

         if x + cw > ww | y + ch > wh then {
	    # no room for new row or column
	    pause()				# wait for OK
            EraseArea()				# clear the window
            ww := WAttrib("width")
            wh := WAttrib("height")
            x := y := Gap
	    bigw := bigh := 0
            }
         }

      # Draw the image and its label.
      CopyArea(imwin, &window, 0, 0, w, h, x, y)
      if /opts["u"] then
         DrawString(x, y + h + fh - WAttrib("descent"), fname)

      # Move on to next position.
      if /opts["r"] then
         y +:= ch + Gap
      else
         x +:= cw + Gap
      bigh <:= ch
      bigw <:= cw
      }

   # All images have been displayed.  Wait for "q" before exiting.
   close(\f)
   close(\imwin)
   FillRectangle(ww - 2.5 * Gap, wh - 2.5 * Gap, 2 * Gap, 2 * Gap)
   FillRectangle(1, 1, 2 * Gap, 2 * Gap)
   WDone()				# await final "q"
end



#  layout(n) -- calculate layout for n images

$define GuessAspect 1.5		# aspect ratio guess used for layout

procedure layout(n)
   local aspf, nhigh, nwide

   aspf := real(ww) / real(wh) / GuessAspect
   nhigh := integer(sqrt(n / aspf) + 0.5)
   nhigh <:= 1
   nwide := (n + nhigh - 1) / nhigh
   maxw := ((ww - Gap) / nwide) - Gap
   maxh := ((wh - Gap) / nhigh) - Gap - fh
   maxw <:= MinWidth
   maxh <:= MinHeight

   if \opts["d"] then
      write(&errout, "npix=", *n, " aspf=", aspf, " nhigh=", nhigh,
         " nwide=", nwide, " maxh=", maxh, " maxw=", maxw)
   return
end



## pause() -- wait for clearance to start a new window

procedure pause()
   local e

   while *Pending() > 0 do		# consume and ignore older events
      Event()
   FillCircle(Gap, Gap, Gap, Gap)
   FillCircle(WAttrib("width") - Gap, WAttrib("height") - Gap, Gap)
					# post circle to indicate wait
   while e := Event() do case e of {
      QuitEvents():	exit()		# quit on "q" etc
      !" \t\r\n":	break		# continue on "\r" etc
      }
   return
end



## rdimage(fname, f) -- read image into scratch window

procedure rdimage(fname, f)
   local s

   s := reads(f, 1024) | fail
   seek(f, 1)
   s ? {
      if ="GIF8" then
         return gifread(f, fname, pal)
      else if ="\xFF\xD8\xFF\xE0" then
         return jpegread(f, fname, pal)
$ifdef _DYNAMIC_LOADING
      else if ="P6" then
         return ppmread(f, fname, pal)
$endif
      else if ="P" & any('123456') then
         return pnmread(f, fname, pal)
      else if ="\x52\xCC" then
         return rleread(f, fname, pal)
      else if find("XPM") then
         return xpmread(f, fname, pal)
      else
	 fail
      }
end



## xpmread(f, fname, pal) -- read XPM image from file f, named fname

procedure xpmread(f, fname, pal)
   local s, w, h, win

   s := XPMImage(f, pal) | fail
   w := imswidth(s)
   h := imsheight(s)
   win := WOpen("canvas=hidden", "bg=" || WAttrib("bg"),
      "width=" || w, "height=" || h) | fail
   DrawImage(win, 0, 0, s)
   return win
end



## gifread(f, fname, pal) -- read GIF image from file f, named fname
#
#  WOpen("image=") is avoided because that consumes color palette entries.
#  Instead, the image is read using ReadImage with a palette restriction.
#
#  gifread returns a window containing the image.
#  It fails if for any reason the image cannot be read.

procedure gifread(f, fname, pal)
   local w, h, win

   (reads(f, 10) | fail) ? {		# read header
      ="GIF8" | fail
      move(2)
      w := ord(move(1)) + 256 * ord(move(1))	# width
      h := ord(move(1)) + 256 * ord(move(1))	# height
      }
   win := WOpen("canvas=hidden", "bg=" || WAttrib("bg"),
      "width=" || w, "height=" || h) | fail
   if ReadImage(win, fname, 0, 0, pal) then
      return win
   close(win)
   fail
end



## jpegread(f, fname, pal) -- read JPEG image

procedure jpegread(f, fname, pal)
   needprog("djpeg") | fail
   return filter("djpeg -g 2>/dev/null", fname, pal)
end



## pnmread(f, fname, pal) -- read PPM/PGM/PBM image

procedure pnmread(f, fname, pal)
   needprog("ppmquant") | fail
   needprog("ppmtogif") | fail
   return filter("ppmquant 256 2>/dev/null | ppmtogif 2>/dev/null", fname, pal)
end



## ppmread(f, fname, pal) -- read raw-mode PPM file f, named fname

procedure ppmread(f, fname, pal)
   local w, h, s, win

   s := ""
   while s ||:= reads(f, 200000)
   w := ppmwidth(s) | fail
   h := ppmheight(s)
   win := WOpen("canvas=hidden", "width=" || w, "height=" || h) | fail
   DrawImage(win, 0, 0, ppmimage(s, pal, ""))
   return win
end



## rleread(f, fname, pal) -- read Utah RLE image

procedure rleread(f, fname, pal)
   needprog("rlequant") | fail
   needprog("rletogif") | fail
   return filter("rlequant | rletogif", fname, pal)
end



## filter(cmd, fname, pal) -- run filter to produce GIF file

procedure filter(cmd, fname, pal)
   local win, f

   remove(tempname)
   cmd := "<" || fname || " " || cmd || " >" || tempname
   if \opts["d"] then
      write(&errout, "+ ", cmd)
   system(cmd)
   f := open(tempname) | fail
   win := gifread(f, tempname, pal)
   close(f)
   remove(tempname)
   return \win
end



## needprog(s) -- check for presence of program s in $PATH
#
#  Fails if the program is not available.
#  Issues a diagnostic only once per program.

procedure needprog(s)
   static ptable
   initial ptable := table()

   /ptable[s] := pathfind(s, map(getenv("PATH"), ":", " ")) |
      (write(&errout, "can't find program \"", s, "\" in $PATH") & "")
   return "" ~=== ptable[s]
end
