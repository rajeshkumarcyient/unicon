###########################################################################
#
#	File:     wu.icn
#
#	Subject:  Program environment for Windows Unicon
#
#	Author:   Clinton L. Jeffery
#
#	Date:     June 12, 2000
#
############################################################################
#
#  This program provides a simple development environment for Unicon.
#  It is gradually gaining features and usability.
#
#  To do:
#	keyboard shortcuts
#	multiple edit regions. Also, edit regions > Windows' 32K limit.
#	UNIX port, or equivalent
#	
############################################################################
#
#  Requires:  Version 9 graphics, MS Windows extensions
#
############################################################################
#
#  Links:  graphics
#
############################################################################


link graphics, io

global menu,
	filnam,
	project,
	icodename,
	xargs,
	targs,
	height,
	width,
	font,
	fontheight,
	msglines,
	linebreak,
	findstr,
	findpos,
	wiconlog,
	wi_ini,
	widollog

#
# appendmessage(s) - add message to end of message window contents
#
procedure appendmessage(s, nonl)
   local s2
   s2 := WinEditRegion("messagewin")
   if /nonl then nonl := "\r\n" else nonl := ""
   WinEditRegion("messagewin", s2 || nonl || s, 0, height - (fontheight * (msglines + 2)))
   WinEditRegion("editregion", &null, 0, 0,
	       width, height - (fontheight * (msglines + 2)))
end

#
# compile() - compile targets, show errors (if WICONLOG is set)
#
procedure compile()
#   if idol1file(filnam) then
#      if not idolt(filnam) then fail
    system("wunicon -c -quiet -log " || wiconlog || " " || targs || " " || comp1file(filnam), log)
    log := readin(wiconlog)
    showanyerror(log)
end

# produce a string to compile file s, only if it is needed
procedure idol1file(s)
   local ext
if find("util.iol",map(s)) then Notice(s)
   s := defextension(s)
   if find(".u", map(s)) then fail  # do not idol-translate .u files
   if find(".icn", map(s)) then fail  # do not idol-translate .icn files
   if not (ext := ((".iol"|".htm") == map(s[-4:0]))) then fail
   s[-4 : 0] := ""    # truncate extension
   # check file attributes; if .icn exists and is newer, use it.
   if newer(s || ".icn", s || ext) then fail
   return s || ext
end

procedure comp1file(s)
   if find(".u", map(s)) then return ""  # do not compile .u files
   s[find(".iol"|".htm"|".icn", map(s)) : 0] := "" # truncate extension
   # check file attributes; if .u2 exists and is newer, use it.
   if newer(s||".u2", s||".icn") then {
      return s || ".u2"
      }
   return s || ".icn"
end

procedure idolt(args[])
   local j
   s := "idol -quiet -c "
   log := ""
   every x := !args do {
      if remove(\widollog) then { }
      else write("remove ", image(widollog), " failed")

      system(s || x)

      if \widollog then {
	  every j := 1 to 5 do {
	      if f := open(widollog) then {
		  close(f)
		  log ||:= readin(\widollog)
		  message(log)
		  break
	      }
	      delay(1000)
	  }
      }
  }
   if \widollog then {
      if showanyerror("idol translation finished") then fail
      }
   else
      appendmessage("set WIDOLLOG for better error reporting; see Wi Help")

# if idol -c *.iol worked correctly, we could do this:
#   every s ||:= " " || !args
#   system(s)
# but at present, it doesn't.
   return
end

procedure complink()
   local x
   if /project then {
      if idol1file(filnam) then
         if not idolt(filnam) then fail
      arglist := comp1file(filnam)
      }
   else {
      # idol-translate all Idol sources that need it
      arglist := []
      i := 1
      while menu[1][i] ~== "E&xit" do i +:= 1
      i +:= 1
      while menu[1][i] do {
         if idl := idol1file(menu[1][i]) then put(arglist, idl)
         i +:= 1
         }
      if *arglist > 0 then {
         if not (idolt ! arglist) then fail
         log := 1
         }

      # compile all project sources that need it (in one step)
      arglist := ""
      i := 1
      while menu[1][i] ~== "E&xit" do i +:= 1
      i +:= 1
      while menu[1][i] do {
	 arglist ||:= comp1file(menu[1][i])
	 arglist ||:= " "
	 i +:= 1
	 }
      if find(".icn", arglist) then {
	 system("wunicon -quiet -log " || wiconlog || " -c " || targs || " " || arglist, log)

	 every 1 to 5 do {
	     if f := open(wiconlog) then {
		 close(f)
		 log := readin(wiconlog)
		 if showanyerror(log) then fail
		 break
	     }
	     delay(1000)
	 }
     }

      # build a list of all the files to be linked together
      arglist := ""
      i := 1
      while menu[1][i] ~== "E&xit" do i +:= 1
      i +:= 1
      while menu[1][i] do {
	 s := menu[1][i]
         s[find(".icn"|".iol"|".htm", map(s)) : 0] := ".u"
	 if s[1] ~== "-" & (not find(".", s)) then s ||:= ".u"
	 arglist ||:= s
	 arglist ||:= " "
	 i +:= 1
	 }
      }

      system("wunicon -quiet -log " || wiconlog || " -o " || icodename || " " || targs || " " || arglist, log)
      s := readin(wiconlog)
      remove(wiconlog)
      showanyerror(s)
end

procedure idolflag()
   if find(".iol", map(filnam|!menu[1])) then return
end

#
# defextension(s) - return s, append default extension if needed
#
procedure defextension(s)
   s ? {
      if tab(find(".")+1) & (tab(many(&letters++&digits))|"") & pos(0) then
	 return s
      else return s ||:= (if idolflag() then ".iol" else ".icn")
   }
end

#
# findstring(s, i) - search for string s starting with position i, select if found.
#
procedure findstring(s, i)
   /i := 0
   s2 := WinEditRegion("editregion")
   s2 ? {
      if findpos := find(s, , i + 1) then {
	 WinEditRegion("editregion", "!setsel", findpos, findpos + *s)
	 }
      }
end

procedure gotoline(i)
   s2 := WinEditRegion("editregion")
   s2 ? {
      every i := 1 to i - 1 do {
	 tab(find("\n")+1) | fail
	 }
      j := &pos
      tab(find("\n")+1) | fail
      WinEditRegion("editregion", "!setsel", j, &pos)
      }
end

procedure main(av)
    temppath := getenv("TEMP") | "/tmp"
    wiconlog := tempname("wu",,temppath,5)
   widollog := getenv("WIDOLLOG")
   wi_ini   := getenv("WICONINI") | "wi.ini"
   xargs := ""
   targs := ""
   wi_initialize()
   &window := open("Wi","g", "size="||width||","||height, "font="||font,
	"resize=on")
   fontheight := WAttrib("fheight")
   menu := [
	["&File", "&New", "&Open...", "&Print", "&Save", "Save &As...", "&IVIB", "E&xit"],
	["&Edit", "C&opy", "&Cut", "&Paste", "&Select All",
	 "&Find...", "Find &Next", "&Replace...", "&Goto line...",
	 "&Match parentheses",
	 "&Undo" # , "Show &Next Error" # not yet
	 ],
	["&Options", "&Message window size...", "&Font...",
	 "Use &DOS (CR-LF) line breaks when saving",
	 "Use &UNIX (LF) newlines when saving",
	 "&Save options"],
	["&Compile", "&Make (compile + link) executable",
	 "&Compile only",
	# "Make &Everything",
	 "&Graphics (Win32) binary (= -G)",
	 "&NT (console mode) binary",
	 "Compiler &Options..."],
	["&Run", "&Run", "&Arguments..."],
	["&Help", "&Wi Programming Environment",
		"Icon &Tutorial Overview",
		"Icon &Language Reference",
	 	"I&dol Reference",
		"Icon &Graphics Facilities Reference",
		"Icon &Program Library Reference",
		"&Visual Interface Builder Reference",
		"&Frequently Asked Questions",
		"&About..."]]
   WinMenuBar ! menu | stop("wi: menu bar failed")
   WinEditRegion("messagewin", "", 0, height - (fontheight * (msglines + 2)))
   if av[1] then openfile(av[1])
   else openfile("noname.icn")
   mainloop()
end

procedure mainloop()
   while e := Event() do
      case e of {
	 "&Find...": {
	    if TextDialog("Enter string to seek: ",,xargs,60)=="Okay" then {
		findstr := dialog_value[1]
		findstring(findstr)
		}
	    }
	 "Find &Next": {
	    findstring(\findstr, findpos)
	    }
	 "&Replace...": {
	    if TextDialog("Replace what with what: ",,
		[(\findstr | ""),""],60)=="Okay" then {
		wu_replace(dialog_value[1], dialog_value[2])
		}
	    }
	 "&Arguments...": {
	    if TextDialog("Enter command line arguments: ",,xargs,60)=="Okay" then
		xargs := dialog_value[1]
		}
	 "Compiler &Options...": {
	    if TextDialog("Enter compiler options: ",,targs,60)=="Okay" then
		targs := dialog_value[1]
		}
	 "&Message window size...": {
	    if TextDialog("Enter # of lines for the message window: ",,msglines,60)=="Okay" then {
	       msglines := dialog_value[1]
	       resize()
	       }
	   }
	 "Use &DOS (CR-LF) line breaks when saving": {
	    linebreak := "CRLF"
	    }
	 "Use &UNIX (LF) newlines when saving": {
	    linebreak := "LF"
	    }
	 "&Font..." : {
	    /font := Font()
	    if font := WinFontDialog(font) then {
	       Font(font)
	       fontheight := WAttrib("fheight")
	       WinEditRegion("messagewin", "!font=" || font)
	       WinEditRegion("editregion", "!font=" || font)
	       }
	    }
	"&Save options": {
	   wi_saveoptions()
	   }
	"C&opy" : {
	   WinEditRegion("editregion", "!copy", 0, 0,
		      width, height - (fontheight * (msglines + 2)))
	   }
	"&Cut" : {
	   WinEditRegion("editregion", "!cut", 0, 0,
		      width, height - (fontheight * (msglines + 2)))
	   }
	"&Paste" : {
	   WinEditRegion("editregion", "!paste", 0, 0,
		      width, height - (fontheight * (msglines + 2)))
	   }
	"&Goto line..." : {
	   if TextDialog("What line shall we go to?",,"",6)=="Okay" then {
	      gotoline(integer(dialog_value[1]))
	      }
	   }
	"&Match parentheses" : {
	    i := WinEditRegion("editregion","!getsel",0,0,
		      width, height - (fontheight * (msglines + 2))) |
		stop("can't get selection")
	    message("i " || image(i))
	    s := WinEditRegion("editregion") || " "
	    if s[i] == ( "(" | "{" | "[" ) then {
		every j := (bal(,s[i],map(s[i],"({[",")}]"),s,i) \ 2)
		if j > i then WinEditRegion("editregion","!setsel",i,j)
	        }
	    else if s[i-1] == (")"|"}"|"]") then {
		every j := (bal(,s[i-1],map(s[i-1],")}]","({["),
				reverse(s[1:i])||" ") \ 2)
		if j > 1 then WinEditRegion("editregion","!setsel",i-(j-1),i)
	        }
	   }
	"&Undo" : {
	   WinEditRegion("editregion", "!undo", 0, 0,
		      width, height - (fontheight * (msglines + 2)))
	   }
	"&Select All" : {
	   WinEditRegion("editregion", "!setsel", 1, 0)
	   }
	"&New": {
	   openfile("noname.icn")
	   WinEditRegion("editregion", "", 0, 0, width, height-(fontheight * (msglines + 2)))
	   message("creating new file")
	   }
	"&Open..." : {
	   openfile()
	   }
	"&Print" : {
	   printfile()
	   }
	"&Save" : {
	   save()
	   }
	"Save &As..." : {
	   saveas()
	   }
	"&Compile only": {
	   save()
	   compile()
	   }
	"&IVIB": {
	   openfile(filnam)
	   system("ivib.exe "|| filnam) |
	       write("system failed")
	   openfile(filnam)
	   }
	"&Make (compile + link) executable": {
	   save()
	   complink()
	   }
	"&Run": run()
	"E&xit" : exit(0)
	"I&dol Reference":
	   system("winhelp idol.hlp &")
	"Icon &Language Reference":
	   system("winhelp iconref.hlp &")
	"Icon &Graphics Facilities Reference":
	   system("winhelp gipd.hlp &")
	"&Wi Programming Environment":
	   system("winhelp ipd271.hlp &")
	"Icon &Tutorial Overview":
	   system("winhelp iconintr.hlp &")
	"Icon &Program Library Reference":
	   system("winhelp iplref.hlp &")
	"&Frequently Asked Questions":
	   system("winhelp iconfaq.hlp &")
	"&Visual Interface Builder Reference":
	   system("winhelp ipd284.hlp &")
	"&About...": {
	   Notice("Windows " || &version,
		  "Wi version 1.02 BETA",
		  "Clint Jeffery, jeffery@cs.unlv.edu",
		  "Department of Computer Science",
		  "University of Nevada, Las Vegas")
	   }
	&resize: {
	   width := &x
	   height := &y
	   resize()
	   }
	default: {
	   if e == !(menu[1]) then { # open file in the current project
	      openfile(e)
	      }
	   else {
	      appendmessage("dropping extraneous event: " || image(e))
	      }
	   }
	}
end

procedure message(s)
   WinEditRegion("messagewin", s, 0, height - (fontheight * (msglines + 2)))
   WinEditRegion("editregion", &null, 0, 0,
	       width, height - (fontheight * (msglines + 2)))
end

procedure monthval(s)
   case map(s) of {
    "jan": return 1
    "feb": return 2
    "mar": return 3
    "apr": return 4
    "may": return 5
    "jun": return 6
    "jul": return 7
    "aug": return 8
    "sep": return 9
    "oct": return 10
    "nov": return 11
    "dec": return 12
   }
   stop("invalid month ", image(s))
end

# is t1 newer than t2?
procedure newer(s1, s2)
   local month, day, year, hour, minute, second,
	 month2, day2, year2, hour2, minute2, second2
if map(s1|s2) == "util.icn" then Notice("s1 " || s1 || " s2 "||s2)
   t1 := stat(s1).mtime | fail
if map(s1|s2) == "util.icn" then Notice("s1 " || s1 || " t1 "||t1)
   t2 := stat(s2).mtime | fail
if map(s1|s2) == "util.icn" then Notice("s2 " || s2 || " t2 "||t2)
   return t1 - t2 # or something like that
$if 0
   t1 ? {
      tab(many(&letters))
      =" "
      month := monthval(tab(many(&letters)))
      =" "
      day := tab(many(&digits))
      =" "
      hour := tab(many(&digits))
      =":"
      minute := tab(many(&digits))
      =":"
      second := tab(many(&digits))
      =" "
      year := tab(many(&digits))
      }
   t2 ? {
      tab(many(&letters))
      =" "
      month2 := monthval(tab(many(&letters)))
      =" "
      day2 := tab(many(&digits))
      =" "
      hour2 := tab(many(&digits))
      =":"
      minute2 := tab(many(&digits))
      =":"
      second2 := tab(many(&digits))
      =" "
      year2 := tab(many(&digits))
      }
    if year > year2 then return
    if year < year2 then fail
    if month > month2 then return
    if month < month2 then fail
    if day > day2 then return
    if day < day2 then fail
    if hour > hour2 then return
    if hour < hour2 then fail
    if minute > minute2 then return
    if minute < minute2 then fail
    if second > second2 then return
    if second < second2 then fail
$endif
end

procedure openfile(s)
   oldfilnam := filnam
   if WinEditRegion("editregion", "!modified", 0, 0,
		 width, height - (fontheight * (msglines + 2))) then {
      case SelectDialog(filnam || " is modified, save it?",,,
		 ["Yes", "Save As", "No", "Cancel"]) of {
	 "Yes": {
	    save()
	    }
	 "Save As": {
	    saveas()
	    }
	 "Cancel": {
	    fail
	    }
	 }
      }

   if filnam := (\s | ((OpenDialog("Open Source File", "noname.icn", 50,
		fileextensions()) == "Okay") & \dialog_value)) then {
      if find(".icp", map(filnam)) then { # open project
	 project := filnam
	 updateproject()
	 }
      else { # open a source file
	 filnam := defextension(filnam)
	 if \project then {
	    tmps := filnam
	    # probably should only delete the prefix of the project here
	    while tmps[1:find("\\",tmps)+1] := ""
	    if not find(map(tmps), map(!(menu[1]))) then {
	       # opened file not in project, add it, or switch out
	       # of project mode?
	       case SelectDialog(filnam || " is not in the project",,,
			["Add it", "Open it", "Cancel"]) of {
	       "Add it": {
		  f := open(project, "w") |
		     stop("can't write to project ", project)
		  put(menu[1], filnam)
		  i := 1
		  while menu[1][i] ~== "E&xit" do i +:= 1
		  i +:= 1
		  while menu[1][i] do {
		     write(f, menu[1][i])
		      i +:= 1
		     }
		  close(f)
		  WinMenuBar ! menu
		  }
	       "Open it": {
		  project := &null
		  icodename := filnam
		  icodename[find(".icn"|".ICN", icodename) : 0] := ""
		  while menu[1][-1] ~== "E&xit" do pull(menu[1])
		  WinMenuBar ! menu
		  }
	       "Cancel": {
	   filnam := oldfilnam
	   fail
	   }
	}
	     }
	 }
      else {
	 icodename := filnam
         icodename[find(".icn"|".iol"|".htm", map(icodename)) : 0] := ""
	 }
      }
      if s := readin(filnam) then {
	 i := 0
	 every find("\n", s) do i +:=1
	 WinEditRegion("editregion", s, 0, 0, width, height - (fontheight * (msglines + 2)))
	 message("opened " || filnam || ", " || i || " lines, " || *s || " characters")
	 setlabel()
	 return
	 }
      }
   else {
      if /filnam then {
	 WinEditRegion("editregion", "# wi won't you please open a file?", 0, 0,
		    width, height - (fontheight * (msglines + 2)))
	 }
      }
end

procedure printfile(s)
  f := open("prn","w") | {
      message("can't print to prn")
      fail
  }
  s := WinEditRegion("editregion")
  writes(f, s, "\^l")
  close(f)
end

procedure readin(fname)
   local f, s, s2, s3
   if not (f := open(fname)) then {
      appendmessage(fname||": new file")
      return ""
      }
   s := reads(f, 32767) | "\r\n"
   close(f)
   if *s > 32700 then {
       appendmessage(fname||" is "||*s||" bytes; exceeds Microsoft's limit")
       fail
      }
   s2 := ""
   s ? {
      while s2 ||:= tab(find("\n")) do {
	 if s2[*s2] ~== "\r" then s2 ||:= "\r"
	 s2 ||:= move(1)
	 }
      s3 := tab(0)
      if *s3 > 0 then s2 ||:= s3
      }
   return s2
end

procedure wu_replace(s1, s2)
   local yes
   /i := 0
   s3 := WinEditRegion("editregion")
   while findpos := find(s1, s3, i + 1) do {
      WinEditRegion("editregion", "!setsel", findpos, findpos + *s1)
      case \yes | SelectDialog("replace "||s1||" with "||s2|| " ?",,,
		 ["Yes", "Yes to All", "No", "Cancel"]) of {
	 "Yes": {
	    s3[findpos : findpos + *s1] := s2
	    i := findpos + *s2
	    WinEditRegion("editregion", s3)
	    }
	 "Yes to All": {
	    yes := "Yes to All"
	    s3[findpos : findpos + *s1] := s2
	    i := findpos + *s2
	    WinEditRegion("editregion", s3)
	    }
	 "No": {
	    i := findpos + 1
	    }
	 "Cancel": {
	    fail
	    }
	 }
      }
end

procedure resize()
   local s2
   s2 := WinEditRegion("messagewin")
   WinEditRegion("messagewin", s2, 0, height - (fontheight * (msglines + 2)))
   WinEditRegion("editregion", &null, 0, 0,
	       width, height - (fontheight * (msglines + 2)))
end

procedure run()
   if s := \wiconlog then {
      if system( # "wiconx " ||
		icodename || " " || xargs) then {
	 s := readin(s)
	 showanyerror(s)
	 }
      else {
	 s := "system(" || # wiconx " ||
	       icodename || " " || xargs ||
		") failed.  Is the PATH setup to run this?"
	 showanyerror(s)
	 }
      }
   else {
      if system( # "wiconx " ||
		icodename || " " || xargs) then {
	 s := # "wiconx " ||
	     icodename || " " || xargs || " completed.\r\n" ||
		"Set your WICONLOG variable for better error support; see Help."
	 showanyerror(s)
	 }
      else {
	 s := # "wiconx " ||
	     icodename || " " || xargs || " ... failed.\r\n" ||
		"Set your WICONLOG variable for better error support; see Help."
	 showanyerror(s)
	 }
      }
end

procedure save(evenifnotmodified)
   local s
   if /filnam then {
      saveas()
      return
      }
   if \evenifnotmodified | WinEditRegion("editregion", "!modified", 0, 0,
		 width, height - (fontheight * (msglines + 2))) then {
      s := WinEditRegion("editregion")
      if linebreak === "LF" then
	 while s[find("\^m\n", s)] := ""
      if file := open(filnam, "wu") then {
	 writes(file, s)
	 close(file)
	 if filnam === project then updateproject()
	 i := 0
	 every find("\n", s) do i +:=1
	 message("saved " || filnam || ", " || i || " lines, " || *s || " characters")
	 # reset the modified flag in the edit region
	 WinEditRegion("editregion", "!modified=0", 0, 0,
	       width, height - (fontheight * (msglines + 2)))
	 return
	 }
      else {
	 Notice("Can't save " || filnam)
	 }
      }
end

procedure fileextensions()
   local s
   static eL
   initial {
      eL := [
	"Icon Sources(*.icn)|*.icn",
	"Icon Projects(*.icp)|*.icp",
	"Idol Sources(*.iol)|*.iol",
	"Idol Web Sources(*.htm)|*.htm",
	"All Files(*.*)|*.*"
	]
      }

   /filnam := "noname.icn"
   if (s := map(filnam[-4:0])) == (".icp" | ".iol" | ".htm") then {
      while not find(s, eL[1]) do put(eL, get(eL))
      }

   s := ""
   every s ||:= !eL || "|"
   return s
end

procedure saveas()
   if s := WinSaveDialog("Save File As...", ,50, fileextensions()) then {
      s := defextension(s)
      if \project then {
	 if (not find(s, !menu[1])) & find(".iol"|".icn"|".u",s) then {
	    put(menu[1], s)
	    WinMenuBar ! menu
	    }
	 }
      filnam := s
      save(1)
      if find(".icp", map(filnam)) then { # open project
	 project := filnam
	 updateproject()
	 }
      setlabel()
      }
end

procedure setlabel()
   if \project then
      WAttrib(\ &window, "label=Wu project: " || project || " editing: " || filnam)
   else
      WAttrib(\ &window, "label=Wu editing: " || filnam)
end

procedure showanyerror(s)
      s := WinEditRegion("messagewin") || "\r\n" || trim(s, '\r\n \t')
      WinEditRegion("messagewin", s, 0, height - (fontheight * (msglines + 2)))
      s ? {
	 if tab(find("File ")+5) & fn := tab(find(";")) &
	    ="; Line " & ln := integer(tab(many(&digits))) then {
	    if map(fn) ~== map(filnam) then
               if not openfile(fn) then return
		  else appendmessage(s)
	    gotoline(ln)
	    return
	    }
	 else
	    WinEditRegion("editregion", &null, 0, 0,
		       width, height - (fontheight * (msglines + 2)))
	 if find("cannot") then return
	 }
end

procedure system(s, apnd)
   local rv
   if \apnd then appendmessage(s)
   else message(s)
   WAttrib("pointer=wait")
   rv := proc("system", 0)(s)
   WAttrib("pointer=arrow")
   if not find("&", s) then
      appendmessage("...finished", 1)
   if \rv then return rv
end

procedure updateproject()
   local f, s
   while menu[1][-1] ~== "E&xit" do pull(menu[1])
   icodename := project
   icodename[find(".icp", map(icodename)) : 0] := ""
   if f := open(project) then {
      while s := trim(read(f), '\^m') do {
	 put(menu[1], defextension(s))
	 }
      close(f)
      }
   WinMenuBar ! menu
end

procedure wi_saveoptions()
   local f
   if f := open(wi_ini,"w") then {
      write(f, "width=",width,"\n",
		"height=",height,"\n",
		"msglines=",msglines,"\n",
		"font=",font,"\n",
		"linebreak=",linebreak)
      }
   else {
      }
end

procedure wi_initialize()
   local f
   height := 400
   width := 600
   msglines := 7
   font := "fixed"
   linebreak := "CRLF"
   if f := open(wi_ini) then {
      while line := read(f) do {
	 line ? {
	    if ="msglines" then {
	       tab(upto(&digits))
	       msglines := integer(tab(many(&digits)))
	       }
	    else if ="height" then {
	       tab(upto(&digits))
	       height := integer(tab(many(&digits)))
	       }
	    else if ="width" then {
	       tab(upto(&digits))
	       width := integer(tab(many(&digits)))
	       }
	    else if ="font" then {
	       tab(many('= \t'))
	       font := tab(0)
	       }
	    else if ="linebreak" then {
	       tab(many('= \t'))
	       linebreak := tab(0)
	       }
	    }
	 }
      close(f)
      }
end
