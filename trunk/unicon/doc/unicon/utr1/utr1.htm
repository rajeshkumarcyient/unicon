<HTML>
<HEAD><TITLE>Unicon ODBC Interface</TITLE></HEAD>
<BODY>

<B><FONT SIZE=4><P ALIGN="CENTER">
	An ODBC Interface for the<br> Unicon Programming Language
</P>

</B></FONT>
<P ALIGN="CENTER">Federico Balbi and Clinton L. Jeffery</P>
<P ALIGN="CENTER">Unicon Technical Report #1b</P>
<P ALIGN="CENTER">June 28, 2002</P>

<P ALIGN="CENTER"><IMG SRC="Image3.jpg" WIDTH=239 HEIGHT=147></P>

<P><B>Abstract</B></P>

<P>The implementation of an ODBC interface for the Unicon language allows programmers to interface their applications to local and remote database management systems with a high level of interoperability and SQL language support.</P>

<P>&nbsp;</P>
<P ALIGN="CENTER">
Department of Computer Science<BR>
The University of Texas at San Antonio<BR>
San Antonio, TX 78255</P>
<P ALIGN="CENTER"></P>
<P ALIGN="CENTER">
Department of Computer Science<BR>
New Mexico State University<BR>
Las Cruces, NM 88003<br>
<P ALIGN="CENTER"></P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">
	This work sponsored in part by the National Library of Medicine.</P>
<P ALIGN="CENTER">&nbsp;</P>

<B><P>1. Introduction</P>
</B>

<P>The Unicon ODBC interface consists of a data type and a set of new
functions to enable Unicon programs to access database management
systems (DBMS). The standard language to retrieve and manipulate data
in a DBMS is the structured query language SQL.</P>


<B>
<P>1.1 Overview</P>
</B>

<P>ODBC is a programming interface (API) to access local and remote
database management systems. ODBC is a de facto industry standard and
works on many different operating systems and programming
languages. It shields programmers from the complexity of different
databases and the communications software used to access the
data. ODBC defines an object called a &quot;data source&quot; that is
referenced by name and maps its name to the exact location of data
(network software, server name, database name and user information if
needed).</P>

<B>
<P>1.2 ODBC Architecture</P>
</B>

<P>ODBC allows multiple applications to access to multiple data
sources using an architecture (Figure 1) that consists of several layers:</P>

<UL>
<LI>A Driver Manager to add, configure and remove different DBMS drivers.</LI>
<LI>A set of drivers that implement the ODBC API for a particular DBMS.</LI>
<LI>Networking software to allow network access to the database.</LI>
<LI>The DBMS.</LI></UL>

<P align="center"><IMG SRC="Image4.gif" WIDTH=462 HEIGHT=202><br>
<em>Figure 1: ODBC Architecture</em></P>

<P>Applications call ODBC functions. The Driver Manager decides which
driver is needed and loads it into memory. After this the Driver
Manager routes ODBC calls to the driver.</P>

<P>The minimum capability required from a driver is to be able to
connect to a server, send SQL statements and retrieve the
results. What is important is that the Driver Manager hides all the
details related to the server so the application does not need to know
if the data is on a local file, a network file server or a remote
host.</P>

<B><P>1.3 Client/Server Model</P></B>

<P>ODBC was designed to work with the client/server model (Figure 2) in
order to satisfy the following requirements:</P>

<UL>
<LI>A standard application programming interface.</LI>
<LI>Access to the particular features of any DBMS.</LI>
<LI>Performance comparable to DBMS native API.</LI></UL>

<P align="center"><IMG SRC="Image5.gif" WIDTH=560 HEIGHT=491><br>
<em>Figure 2: Client/Server Model</em></P>

<B>
<P>1.4 ODBC Installation</P>
</B>

<P>After deciding which DBMS an application is going to use it is
necessary to install its related ODBC driver to let the application
establish a connection with the DBMS.</P>

<P>For our ODBC tests we decided to use MySQL. MySQL is a free SQL
server downloadable at <A HREF="http://www.mysql.org/">www.mysql.org</A>
and available for most
popular platforms. We tested both Linux and Sun/Solaris version. MySQL
comes with MyODBC, the ODBC driver for the server, and it can be
downloaded at the same web site. There are driver versions both for
Unix and Windows.</P>

<P> MyODBC comes with a standard Windows setup.exe program. At one
point during setup you have to physically click on MyODBC within a
list-box to install successfully, but otherwise installation is
uneventful. If installation is successful, when you are finished you
will be able to see your MySQL data source(s) from the ODBC Data
Sources control within the Windows Control Panel (Figure 3).</P>

<P ALIGN="CENTER"><IMG SRC="Image6.gif" WIDTH=529 HEIGHT=211><br>
<em>Figure 3: The Control Panel windows</em></P>


<P ALIGN="CENTER"><IMG SRC="Image7.gif" WIDTH=461 HEIGHT=377><br>
<em>Figure 4: The Driver Manager</em></P>


<P>This control comprises the main interface of the ODBC Driver
Manager (Figure 4). The ODBC Driver Manager lists the ODBC drivers
installed for different DBMSes. We can add new drivers, remove or
configure existing ones within this control. The MyODBC setup program
automatically adds and configures the driver in the Driver Manager's
driver list.</P>

<P>After installing MyODBC we can open the Driver Manager and take a
look at the different configuration parameters (Figure 5).</P>

<P ALIGN="CENTER"><IMG SRC="Image8.gif" WIDTH=452 HEIGHT=482><br>
<em>Figure 5: MyODBC configuration</em></P>


<P>The MyODBC configuration panel has the following fields:</P>


<UL>

<LI><B>Windows DSN name</B>: DSN stands for Data Source Name and it
contains the alias that we will use in our applications to reference a
particular database.</LI>

<LI><B>MySQL host</B>: is contains the Internet domain name or IP
address of the server we want to connect to.</LI>

<LI><B>MySQL database name</B>: name of the database that this data
source refers to.</LI>

<LI><B>User</B>: database user name. For better security this field
can be left empty and specified within an application.</LI>

<LI><B>Password</B>: database user password. For security this field
can be also left empty and specified during application runtime.</LI>

<LI><B>Port</B>: this field is the port where MySQL server listens for
 connection. If left empty the default value is 3306.</LI>

<LI><B>SQL command on connect</B>: this field can contain an SQL
command that is executed when the application first connects to the
server.</LI>

</UL>


<P>All the other check-boxes are driver options. Of particular note
are the following options:</P>


<UL>

<LI><B>Trace MyODBC</B>: traces the driver activity on a log file
C:\MYODBC.TXT. This is useful to find errors within an
application.</LI>

<LI><B>Use compressed protocol</B>: this option enables data
compression in order to speed up data transfer on slow
connections. This is recommended on fast computers.</LI>

<LI><B>Read options from C:\my.cnf</B>: this option lets the driver
read a particular configuration from a file. This helps administrators
to easily configure several client machines by including c:\my.cnf in
the application distribution.</LI>

</UL>

<B>
<P>1.5 Unicon ODBC Interface</P>
</B>

<P>The Unicon ODBC interface is a set of built-in functions that allow
an easy way to write SQL database applications.</P>

<p>The function set can be divided in four main groups.
A synopsis of these functions is given here. The reference section towards
the end of this document describes them in detail.</P>
</P>


<UL>
<B>
<LI>Connection</B>: handle Unicon connection with a DBMS.
<UL>
<I><LI>open(dsn, "o", username, password)</I>: opens a connection to the database server and the specified table.</LI>
<I><LI>close(db)</I>: closes a table and the related database connection.</LI></UL>
</LI>

<B><LI>Catalog or information</B>: used to retrieve information about drivers, databases and tables (for example driver capabilities, database organization, tables description).
<UL>
<I><LI>dbcolumns</I>: gets information about a specific table columns.</LI>
<I><LI>dbdriver</I>: gets information about a specific ODBC driver in use.</LI>
<I><LI>dbkeys</I>: gets information about a particular table primary keys.</LI>
<I><LI>dbproduct</I>: gets information about the DBMS product the in use.</LI>
<I><LI>dbtables</I>: get information about a tables that belong to a specified database.</LI></UL>
</LI>

<B><LI>Data retrieval</B>: to load data from a DBMS to Unicon data structures.
<UL>
</FONT>
<LI><I>fetch</I>: fetches a row from a rowset.</LI>
</UL>
</LI>


<B><LI>General</B>: to interact directly with the DBMS using SQL commands. This can be used to send arbitrary SQL commands including extensions particular to a specific DBMS implementation.
<UL>
</FONT><I><LI>sql(db, s)</I>: sends an SQL command string to the server for execution.</LI></UL>
</LI>
</UL>



<P>&nbsp;</P>
<B><P>2. An Example Phonebook Application</P>
</B>
<P>A typical database application performs the following tasks:</P>


<UL>
<LI>Connects to a database</LI>
<LI>Processes database information</LI>
<LI>Disconnects from the database</LI></UL>


<P>This section presents a simple Unicon phonebook application that
takes advantage of the ODBC interface and work with MySQL server. The
example will show how to use the main Unicon ODBC functions in order
to connect, read and write data on a DBMS.</P>

<P>Our application will have the following menu:</P>


<UL>
<LI>Insert a phone number</LI>
<LI>Delete a phone number</LI>
<LI>Modify a phone number</LI>
<LI>List phone number in database</LI></UL>


<P>Note that this application assumes a preexisting database server. a user account on that server, and a table on the server has been created to store the phone book information. Let’s create a <B>phones</B> table on our server with the following columns:</P>

<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=519>
<TR><TD WIDTH="52%" VALIGN="TOP">
<B><P ALIGN="CENTER">Column Name</B></TD>
<TD WIDTH="48%" VALIGN="TOP">
<B><P ALIGN="CENTER">Type</B></TD>
</TR>
<TR><TD WIDTH="52%" VALIGN="TOP">
<P>Name (KEY)</TD>
<TD WIDTH="48%" VALIGN="TOP">
<P>VARCHAR(40)</TD>
</TR>
<TR><TD WIDTH="52%" VALIGN="TOP">
<P>Phone</TD>
<TD WIDTH="48%" VALIGN="TOP">
<P>VARCHAR(12)</TD>
</TR>
<TR><TD WIDTH="52%" VALIGN="TOP">
<P>Address</TD>
<TD WIDTH="48%" VALIGN="TOP">
<P>VARCHAR(60)</TD>
</TR>
</TABLE>
</CENTER></P>


<P>We could create such a table within the application by appropriate Unicon ODBC calls, but perhaps it is more typical for such database administration tasks to be performed separately by a database administrator. From our server machine we invoke the mysql client program to talk to the SQL server:</P>

<FONT FACE="Courier" SIZE=3><P>
[fbalbi@icon bin]$ ./mysql -ufbalbi -p mysql<br>
Enter password:<br>
Reading table information for completion of table and column names<br>
You can turn off this feature to get a quicker startup with -A<br>
Welcome to the MySQL monitor.  Commands end with ; or \g.<br>
Your MySQL connection id is 96 to server version: 3.22.15-gamma<br>
   <br>
<P>Type 'help' for help.</P>
</FONT>
<P>Now let's create the example table with the column <B>Name</B> as primary key:</P>
<FONT FACE="Courier">
<P>mysql&gt; <B>create table phones (name varchar(40) primary key, phone varchar(12), address varchar(60));</P>
</B><P>Query OK, 0 rows affected (0.04 sec)</P>

<P>mysql&gt; <B>describe phones;</P>
</B>
<PRE>+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(40) |      | PRI |         |       |
| phone   | varchar(12) | YES  |     | NULL    |       |
| address | varchar(60) | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
3 rows in set (0.01 sec)</PRE>
</FONT>
<P>Now the table is properly created and empty, in fact the following select commands returns an empty set:</P>

<FONT FACE="Courier"><P>mysql&gt; <B>select * from phones;</P>
</B><P>Empty set (0.00 sec)</P>
</FONT>
<P>Here the full list of our phonebook application. As an exercise, you may wish to consider how you would extend this application to include the above table-creation task as another menu option. Hint: the function sql() may come in handy.</P>

<FONT FACE="Courier"><PRE># global variables

global db
global user, password

record person(name, phone, address) # database row

procedure main() # main program
  write("*** Unicon ODBC phonebook ***\n\n")
  login() # get user name and password
  # connect to mysql data source and open table "phones"
  db := <B>open</B>("mysql", "o", user, password)

  if &amp;errornumber~=0 then { # error during login
    write(&amp;errortext)
  }
  else {
    getdbinfo() # print database information
    repeat {
      menu() # print menu options 
      option := read()

      case option of {
        "i": insertphone()
        "d": deletephone()
        "u": updatephone()
        "l": listphones()
        "q": break
        default: write("*** wrong selection ***")
      }
    }
    <B>close</B>(db) # close table and database connection
  }
  write("bye")
end

#
# user information
#
procedure login()
  writes("user: ")
  user := read()
  writes("password: ")
  password := read()
end

&nbsp;
#
# get database name and version
#
procedure getdbinfo()
  info := <B>dbproduct</B>(db)
  write("\nDBMS: ", info["name"])
  write("version: ", info["ver"])
end

#
# display menu options
#
procedure menu()
  write("\nI)nsert")
  write("D)elete")
  write("U)pdate")
  write("L)ist")
  write("Q)uit\n")
end

#
# insert a new record
#
procedure insertphone()
  writes("name: ")
  name := read()
  writes("phone: ")
  ph := read()
  writes("address: ")
  addr := read()
  <B>sql</B>(db, "INSERT INTO phones VALUES(" ||
           name || "," || ph || "," || addr || ")")
  if &amp;errornumber~= 0 then
    write("*** couldn't insert person ***")
end


#
# remove a record 
#
procedure deletephone()
   writes("name to remove: ")
   name := read()

   # delete row with specified name column
   <B>sql</B>(db, "DELETE FROM phones WHERE name='"||name||"'")
end

#
# update a record
#
procedure updatephone()
  writes("name to update: ")
  name := read()

  # select all columns of rows with specified name column
  <b>sql</b>(db, "SELECT * FROM phones WHERE name='"||name||"'")

  if row := fetch(db) then { # data found
    writes("phone (",row["phone"],"): ")
    row["phone"]:=read()
    writes("address (",row["address"],"): ")
    row["address"]:=read()

    # update row on server
    <B>sql</B>(db, "UPDATE phones SET " ||
                   "phone='" || row["phone"] || "'" ||
                   ",address='" || row["address"] || "'" ||
                   " WHERE name='" || row["name"] || "'")
    )
  }
  else write("\n\n*** person not found ***")
end

#
# list all people in the database
#
procedure listphones()
   sql(db, "SELECT * FROM phones") # select all columns and all rows

   while row := <B>fetch</B>(db) do { # while data found
      # write row fields
      every i:=(1 to *row) do writes("[",row[i],"]")
      write()
      }
end</pre>
</FONT>
<br>
<br>

<FONT SIZE=4><b><P>
		3. Unicon ODBC Function Reference
</P></B></FONT>

<P>
With the exception of <code>open()</code> which <em>returns</em> a file
reference to an ODBC connection, all these functions generally take an
initial parameter (designated by <code>f</code> which must be an ODBC file
previously opened with <code>open(...,"o")</code>.  Since it is used
consistently everywhere, this initial parameter is not given in the
detailed description of the rest of the function parameters.
</P>

<B><FONT SIZE=4><P><hr>close(f)
</B></FONT>: closes an ODBC file</P>


<B><P>Code Example</P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
  db:=<B>open</B>("mydb","o","federico","mypassword")
  
  # 
  # ...program body...
  #

  <B>close</B>(db) # close table and disconnect
end</PRE>
</FONT>

<B><FONT SIZE=4><P><hr>dbcolumns(f,t) : L
</FONT></B>: return column information related to table t in database f</P>

<B><P>Parameters</P></B>

<UL>
<LI><B>tablename</B>: string name of the SQL table to examine</LI>
</UL>


<B><P>Return Type</B>: list of records with the following string fields: </P>


<UL>
<B><LI>catalog</B>: catalog name </LI>
<B><LI>schema</B>: schema name </LI>
<B><LI>tablename</B>: table name </LI>
<B><LI>colname</B>: column name </LI>
<B><LI>datatype</B>: SQL data type </LI>
<B><LI>typename</B>: data source-dependent data type name </LI>
<B><LI>colsize</B>: if <B>datatype</B> is SQL_CHAR or SQL_VARCHAR this columns contains the maximum length in characters of the column </LI>
<B><LI>buflen</B>: length in bytes of data transferred on a fetch operation </LI>
<B><LI>decdigits</B>: the total number of significant digits to the right of the decimal point </LI>
<B><LI>numprecradix</B>: for numeric data types either 10 or 2. If it is 10, the values in <B>columnsize</B> and <B>decimaldigits</B> give the number of decimal digits allowed for the column. If it is 2, the values in <B>columnsize</B> and decimal digits give the number of bits allowed in the column </LI>
<B><LI>nullable</B>: 0 if the column could not include NULL values; 1 if the columns accept NULL values; 2 if it is not known whether the column accepts NULL values.</LI>
<B><LI>remarks</B>: a description of the column </LI>
</UL>

<B><P>Code Example </P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   f := <B>open</B>("mysql","o","federico","") # open table
   colinfo := <B>dbcolumns</B>(f) # get columns information
   write("column info\n")

   every i := 1 to *colinfo do { # for each column
      writes("col #",i,": ")
      every j := 1 to *colinfo[i] do # write column's info
         writes("[",colinfo[i][j],"]")
      write()
      }
   write()
   <B>close</B>(f) # close table and connection to the database
end</PRE>
</FONT>

<B><FONT SIZE=4><P><hr>dbdriver(f)</FONT></B>
: returns information about the driver being used </P>


<B><P>Return Type</B>: Record with the following string fields: </P>


<UL>
<B><LI>"name"</B>: filename of the driver used to access the data source.</LI>
<B><LI>"ver"</B>: version of the driver and, optionally a description of the driver.</LI>
<B><LI>"odbcver"</B>: version of ODBC that the driver supports.</LI>
<B><LI>"dsn"</B>: A caracter string with the data source name used during connection.</LI>
<B><LI> connections</B>: maximum number of active connections that the driver can support (zero for no specified limit or if the limit is unknown).</LI>
<B><LI>statements</B>: maximum number of statements that the driver can support for a connection (zero for no specified limit or if the limit is unknown).</LI></UL>


<B><P>Code Example </P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   f := <B>open</B>("mydb","o","fbalbi","") # open mytable

   dinfo := <B>dbdriver</B>(f) # get driver information record

   write("driver name     : ", dinfo["name"])
   write("driver version  : ", dinfo["ver"])
   write("driver ODBC ver : ", dinfo["odbcver"])
   write("connections     : ", dinfo["connections"])
   write("statements      : ", dinfo["statements"])
   write("data source name: ", dinfo["dsn"])

   <B>close</B>(db)	 # close database connection
end</PRE>
</FONT>


<B><FONT SIZE=4><P><hr>dbkeys(f)</FONT></B>
: returns information about the primary key columns </P>

<B><P>Return Type</B>: list of records with the following string fields: </P>

<UL>
<B><LI>col</B>: column name.</LI>
<B><LI>seq</B>: sequence number.</LI></UL>


<B><P>Code Example</P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   f := <b>open</b>("mydb","o","fbalbi","passwd") # open table

   write(*f, " row(s) selected")
   write("\ntable keys")

   krec := <B>dbkeys</B>(f) # retrieve primary key information

   every i := 1 to *krec do {
      r := krec[i]
      write("[", r["col"], "]") # print key name
      }
   <b>close</b>(f) # close table
end</PRE>
</FONT>

<B><FONT SIZE=4><P><hr>dblimits(f)</FONT></B>
: returns information about the limits applied for identifiers and clauses in SQL statements.</P>


<B><P>Return Type:</B> record with the following string fields:</P>

<UL>
<LI>"<B>maxbinlitlen</B>": maximum length of a binary literal in an SQL statement. if there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxcharlitlen</B>": maximum length of a character literal in an SQL statement. if there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxcolnamelen</B>": maximum length of a column name in the data source. if there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxgroupbycols</B>": maximum number of columns allowed in a GROUP BY clause. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxorderbycols</B>": maximum number of columns allowed in a ORDER BY clause. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxindexcols</B>": maximum number of columns allowed in an index. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxselectcols</B>": maximum number of columns allowed in a SELECT list. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxtblcols</B>": maximum number of columns allowed in a table. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxcursnamelen</B>": maximum name length of a cursor name in the data source. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxindexsize</B>": maximum number of bytes allowed in the combined fields of an index. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxownnamelen</B>": maximum length of an owner name in the data source. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxprocnamelen</B>": maximum length of a procedure name in the data source. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxqualnamelen</B>": maximum length of a qualifier name in the data source. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxrowsize</B>": maximum length of a single row in a table. If there is no specified limit or the limit is unknown, this value is set to zero.</LI>
<LI>"<B>maxrowsizelong</B>": a character string: "Y" if the maximum row size returned for the "maxrowize" information type includes the length of all SQL_LONGVARCHAR and SQL_LONGVARBINARY columns in the row; "N" otherwise.</LI>
<LI>"<B>maxstmtlen</B>": maximum lenght (number of characters, including white space) of an SQL statement. If there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxtblnamelen</B>": maximum length of a table name in the data source. If there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxselecttbls</B>": maximum number of tables allowed in the FROM clause of a SELECT statement. If there is no maximum length or the length is unknown, this value is set to zero.</LI>
<LI>"<B>maxusernamelen</B>": maximum length of a user name in the data source. If there is no maximum length or the length is unknown, this value is set to zero.</LI></UL>


<B><P>Code Example</P>

</B><FONT FACE="Courier"><PRE>procedure main()
   f := <b>open</b>("mydb","o","fbalbi","") # open mytable

   dbl:=<B>dblimits</B>(f) # get DBMS limits information

   # print out all DBMS limits
   every i := 1 to *dbl do write(dbl[i])

   <b>close</b>(f) # close table
end</PRE>
</FONT>


<b><FONT SIZE=4><P><hr>dbproduct(f)</FONT></B>
: returns information about the DBMS accessed by the driver </P>

<B><P>Return Type</B>: record with the following string fields: </P>

<UL>
<B><LI>name</B>: DBMS product name </LI>
<B><LI>ver</B>: DBMS version </LI></UL>


<B><P>Code Example </P>
</B><FONT FACE="Courier">
<PRE>procedure main()
   f := <B>open</B>("mydb","o","fbalbi","mypasswd") # open table

   p := <B>dbproduct</B>(f) # get DBMS product information

   write("product name: ", p["name"]) # print product name
   write("product ver : ", p["ver"])  # print product version

   <B>close</B>(f) # close table
end</PRE>
</FONT>


<B><FONT SIZE=4><P><hr>dbtables(f): L
</B></FONT>
: get information about tables stored in database f</P>

<B><P>Return Type</B>: list of records with the following string fields: </P>

<UL>
<B><LI>qualifier</B>: table qualifier </LI>
<B><LI>owner</B>: table owner </LI>
<B><LI>name</B>: table name </LI>
<B><LI>type</B>: table type </LI>
<B><LI>remarks</B>: table remarks </LI></UL>


<B><P>Code Example </P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   f := <B>open</B>("mysql","o","fbalbi","xxxxxxxx")
  
   # get current database tables information 
   tablelist := <B>dbtables</B>(f)

   # write number of tables
   write("size list = ", *tablelist) 

   every i := 1 to *tablelist do { # for each table
      r:=tablelist[i]

      # print table information fields
      every j := 1 to *r do writes("[",r[j],"]") 
      write()
      }

  <B>close</B>(f) # close table
end</PRE>
</FONT>


<B><FONT SIZE=4><P><hr>fetch(f)
</B></FONT>: fetches and returns a row from a rowset</P>

<B><P>Return Type</B>: record with fields names equal to the selected table columns (use sql(db, "SELECT...") for column selection) </P>

<B><P>Code Example </P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   f := <B>open</B>("mydb","o","fbalbi","mypass")

   # select 3 existing columns from table mytable
   <B>sql</B>(f, "SELECT id, name, amt FROM mytable")

   # *f = number of selected rows
   # may not work with some DBMS
   write(*f, " row(s) selected")

   write("\nrow values")

   # fetch returns a record whose
   # fieldnames are the column names selected with a SQL SELECT
   # in this example we can reference fields using row["id"],
   # row["name"] and row["amt"]

   while row := <B>fetch</B>(f) do { # while rows to retrieve
      every col := 1 to *row do  # for each col of row
         writes("[",row[col],"]") # write row field
      write()
      }

   <B>close</B>(f) # close table
end</PRE>
</FONT>


<FONT SIZE=4><B><P><hr>open(db, "o", username, password)</B></FONT>
: connect to a database and returns the associated ODBC file.</P>

<B><P>Parameters</B>: </P>

<UL>
<B><LI>db</B>: Data Source Name string (defined in ODBC Manager) </LI>
<B><LI>user</B>: database user string</LI>
<B><LI>password</B>: user password string </LI>
</UL>


<B><P>Code Example </P>
</B>
<FONT FACE="Courier"><PRE>procedure main()
   # open "mytable" in mydb data source name defined in
   # ODBC Data Sources (see Windows 9x Control Panel folder)
   # using username "federico" and password "mypassword"

   db := <B>open</B>("mydb","o","federico","password")
  
   # 
   # ...program body...
   #

  <B>close</B>(db) # close table and disconnect
end</PRE>
</FONT>


<B><FONT SIZE=4><P><hr>sql(f, query)</FONT></B>
: submits an SQL query using the connection opened by f</P>

<B><P>Parameters:</P></b>

<UL>
<B><LI>query</B>: SQL statement string </LI></UL>


<B><P>Code Example</P></B>

<FONT FACE="Courier"><PRE>procedure main()
   # connect to DBMS and open table
   db:=<B>open</B>("personnel_db","o","manager","passwd")

   # prepare SQL query string to create an employees table
   # of 5 columns

   query := "CREATE TABLE employees (id INTEGER PRIMARY KEY,_
             name VARCHAR(40), phone VARCHAR(12), DOB DATE,_
             pay FLOAT)"

   <b>sql</b>(db, query) # execute query
   <b>close</b>(db) # close
end</PRE>
</FONT>


<br>
<br>

<FONT SIZE=4><b><P>
		4. Conclusions
</P></B></FONT>

<P>This interface is a successful, albeit low-level interface to SQL
databases. It has been tested and proven effective on large real world
data sets. SQL commands are constructed as strings, and Unicon excels
at such text manipulation.  This interface does <em>not</em> provide Unicon
programmers with higher level abstractions of database capabilities.
For example one original design goal was to allow programmers to interact
with a database with minimum knowledge of SQL.  For example, the built-in
table data type does not match the SQL table abstraction exactly, but
with proper operator support interactions with SQL tables could look
very similar to interactions with Unicon tables.
</P>
<br>
<br>


<B><font size=4><P>Appendix: Unicon ODBC Implementation Notes</P></font></B>

<P>The implementation of the ODBC interface includes changes to several files of the Unicon runtime system, as well as the addition of a new file for the new functions that were added.</P>

<U><P>New files</P>
</U><FONT SIZE=2>

<UL>
</FONT><B><LI>FDB.R</B>: This is the main file of Unicon ODBC. It contains the Unicon ODBC function set implementation. It is written in standard C with RTT extensions.</LI>

<B><LI>RDB.R</B>: contains the C implementation of odbcerror function that is widely called in FDB.R.</LI></UL>


<U><P>Modified files</P>
</U>

<UL>
<LI>RPROTO.H: contains odbcerror function definition.</LI>
<LI>OMISC.R: &quot;*&quot; operator implementation for ODBC file type.</LI>
<LI>FDEFS.H: ODBC function definitions.</LI>
<LI>DATA.R: runerr error code for ODBC file mismatch.</LI>
<LI>RSTRUCTS.H: ISQLFile definition (ODBC connection type).</LI>
<LI>REXTERNS.H: ISQLEnv extern definition.</LI>
<LI>RMACROS.H: Fs_ODBC file status flag and ODBC error codes.</LI>
<LI>SYS.H: VisualC++ ODBC header files inclusion (windows.h and sqlext.h).</LI>
<LI>INIT.R: ODBC Environment structure release.</LI>
<LI>DEFINE.H: ISQL symbol definition for conditional compilation.</LI>
<LI>GRTTIN.H: new ODBC types definitions.</LI>
<LI>MAKEFILE.RUN: Runtime system makefile (FDB.R and RDB.R definitions added)</LI>
<LI>ICONX.LNK: Link file (XFDB.OBJ and XRDB.OBJ definitions added)</LI></UL>

<B>
<P>ISQLFile type</P>
</B><FONT SIZE=2>
</FONT><P>In Unicon an ODBC connection to a database is similar to a file operation. Internally this is represented by the following C structure:</P>
<FONT SIZE=2>
</FONT><FONT FACE="Courier"><PRE>#ifdef ISQL             /* ODBC support      */
  struct ISQLFile {     /* SQL file          */
    SQLHDBC hdbc;       /* connection handle */
    SQLHSTMT hstmt;     /* statement handle  */
  };
#endif</PRE>
</FONT>
<P>The field <I>hdbc</I> is used to keep the connection information associated to a particular ISQLFile file. <I>hstmt</I> is the statement structure that saves the results or dataset returned by an ODBC operation. The design of the interface is table oriented, which means that for each table we open a new connection.</P>
<P>In the future we will consider the possibility to associate a file to a database. This would let us open a connection for each database and share the same connection for each table within the same database. In this way we can open a file and use more than a table.</P>

<P>Actually when <I>open(DSN,"o",user,password)</I> is called Unicon allocates an ISQLFile object and initializes the structure fields in the following way:</P>


<UL>
<I><LI>hdbc</I> is related to the DSN specified in <I>open()</LI>
<LI>hstmt</I> is related to <I>hdbc</i></LI>
</UL>

<P>&nbsp;</P>
<B><FONT SIZE=4><P>References</P></FONT></B>
<OL>

<LI>Kyle Geiger. Inside ODBC. Microsoft Press, Redmond, Washington, 1995.</LI>
<LI>Roger E. Sanders. ODBC 3.5 Developer's Guide. McGraw-Hill, 1998.</LI>
<LI>Microsoft ODBC 2.0 Programmer's Reference Guide. Microsoft Press, Redmond, Washington, 1994.</LI>
<LI>Microsoft ODBC 3.0 Programmer's Reference. Microsoft Press, Redmond, Washington, 1997.</LI>
<LI>Ralph E. Griswold, Madge T.Griswold. The Icon Programming Language, 3<SUP>rd</SUP> ed.. Peer-to-Peer Communications, San Jose, 1997.</LI>
<LI>Ralph E. Griswold. The Implementation of the Icon Programming Language. Princeton University Press, 1986.</LI>
<LI>Clinton Jeffery, Shamim Mohamed, Ray Pereda, and Robert Parlett. Programming with Unicon. Draft manuscript from http://unicon.sourceforge.net.</LI>
<LI>MySQL Reference Manual for version 3.23.2-alpha. From http://www.mysql.org</LI></OL>

</BODY>
</HTML>
