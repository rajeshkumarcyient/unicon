#
# breakpoint.icn: handle UDB's breakpoint-related tasks
# Author:         Ziad Al-Sharif, zsharif@gmail.com
# Contributor:    Gigi Young
#

$include "evdefs.icn"
$include "defaults.icn"

#
# For every file that has a breakpoint
# we will create a new breakPt in a list inside a table.
#
record breakPt(
   id,    # a unique identification number
   fname, # The file name that has the breakpoint
   line,  # The exact line number where the breakpoint is
   state, # an integer code with (ENABLED | DISABLED | DELETED)
   code,  # a copy of the actual source code of that line
   coexp  # instance of class Coexp, holds the value of the coexp that the 
          # breakpoint is applied to, value is &null if applied to all coexps
   )

class BreakPoint(
   DState,       # (Alias) object of type State class
   breakPoints,  # A table maps files to their list of breakpoints
   count,        # An integer counts the total number of breakpoints
   msg           # a string with latest message from this class
   )

#
# Check the Monitored file for a breakpoint
#
method checkBreakpoint()
   local  cur_file, cur_line, L, bp, id

   cur_file := keyword("file", MONITORED)
   if member(breakPoints, cur_file) then {
      cur_line := keyword("line", MONITORED)
      L := breakPoints[cur_file]
      every bp := !L do
	 if cur_line = bp.line & bp.state = ENABLED &
	    id := isBreakExist(cur_file,cur_line) &
            (/bp.coexp | bp.coexp.id == DState.coState.curr.id)
            then {
            
	    DState.State := PAUSE
	    # this delete will help "next" and "step" operate well
	    # jut remove the the breakMask set from the valueMask
	    # table temporarly until the continue command comes on
	    delete(DState.valueMask,E_Line)
            msg := constructBpMsg(bp, 1) # 1 -> shows source code. add a flag?
	    DState.Write(msg)
	    return
	    }
      }
end

#
# returns a string name of the state of the brekpoint
#
method getBreakState(state)

   if state = ENABLED then
      return "enabled"
   else if state = DISABLED then
      return "disabled"
   else if state = DELETED then
      return "deleted"
   else
      return "unknown state"
end

#
# Construct a breakpoint message.
#
method constructBpMsg(bp, verbose)
   local breakpoint := "", coexp := "", src_code := ""
   
   if /bp then return "" # null breakpoint?
   
   breakpoint ||:= "\n   Breakpoint #"|| bp.id || 
                   " (" || getBreakState(bp.state) || ") at " ||
                   bp.fname || ":" || bp.line 

   if \verbose then 
      src_code ||:= "\n     " || bp.line || ": " || bp.code

   if \bp.coexp then
      coexp ||:= " coexp " || bp.coexp.id 

   return breakpoint || coexp || src_code
end

#
# prints out a list of the existing breakpoints used by cmdBreak
#
method printBreakInfo(cmd)
   local x, L, bp, name

   if type(cmd) == "list" then name := cmd[3]
   msg := ""
   if /name then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every bp := !L do {
            msg ||:= constructBpMsg(bp)
            }
	 }
      }
   else {
      if integer(name) then {
	 every x := key(breakPoints) do {
	    L := breakPoints[x]
	    every bp := !L do {
	       if name = bp.id then {
                  msg := constructBpMsg(bp)
	          break break
	          }
	       }
	    msg||:="\n   Breakpoint #"||name||" is not available."
	    }
	 }
      else {
	 if not find(".icn",name) then name ||:= ".icn"
	 if DState.srcFile.isSrcFile(name) then {
	    if L:=breakPoints[name] & type(L) == "list" then {
	       every bp := !L do
                  msg ||:= constructBpMsg(bp)
	       }
	    else
	       msg := "\n   No breakpoints available in "||name
	    }
	 else
	    msg := "\n   Source file \""||name||"\" is not in the binary !!!"
	 }
      }
   if *msg = 0 then
      msg := "\n   No breakpoints available."
   DState.Write(msg)
end

#
# check to see whether a breakpoint is pre-exist or not
#
method isBreakExist(fname, line, breakpoint)
   local L, bp, coexp

   if member(breakPoints, fname) then {
      L := breakPoints[fname]
      every bp := !L do {
	 if bp.line = line & bp.state ~= DELETED then {

            # only when trying to add a breakpoint - check if coexp of
            # added breakpoint differs from current breakpoint
            if \breakpoint then {
               coexp := breakpoint.coexp
               # coexps differ
               if (\coexp & (/bp.coexp | bp.coexp.id ~= coexp.id)) |
                  (/coexp & \bp.coexp) then {
                  # ask if breakpoint should be replaced
                  msg := constructBpMsg(bp) || " already exists. "
                  msg ||:= "\n   Do you really want to replace it (Y/n)?: "
                  DState.Writes(msg)
                  if read() == (""|"y"|"Y"|"yes"|"YES") then {
                     # replace breakpoint id
                     breakpoint.id := bp.id
                     count -:= 1
                     # delete breakpoint
                     deleteBreakPoint(fname,line)
                     msg :="\n   Previous breakpoint has been replaced."
                     fail
                     }
                  }
               # same coexp -> same breakpoint, append to message
               else {
	          msg := "\n   The breakpoint already exists._
	                  \n   Type \"break\" to see all breakpoints"
                  }
               }
            # same breakpoint, return id
	    return bp.id
            }
         }
      }
   fail
end

#
# used to add a new breakpoint into the
# breakPoints table and the breakMask set
#
method addBreakPoint(fname, bp)
   if member(breakPoints,fname) then
      put(breakPoints[fname], bp)
   else
      breakPoints[fname] := [bp]

   insert(DState.breakMask,bp.line)
end

#
# used it clear breakpoints, is used by cmdClear()
#
method deleteBreakPoint(fname, line)
   local L, i
   L := breakPoints[fname]
   every i := 1 to *L do {
      if L[i].line = line then
	 delete(L,i)
      }
   if *L = 0 then
      delete(breakPoints, fname)

   delete(DState.breakMask,line)
end

method parse_colon_arg(arg)
   local arg_list, num_colon, s

   arg_list := []
   num_colon := 0
   s := ""

   # parse cmd[2] for word args, :, and ::
   arg ? { 
      # splits words and colons up to last colon
      while c := move(1) do {
         # word arg
         if c ~== ":" then s ||:= c 
         # colon arg
         else { 
            num_colon +:= 1
            while c := (move(1) == ":") do {
               num_colon +:= 1
               if num_colon > 2 then {
	          DState.State := ERROR
           	  msg   :="\n   \""||DState.cmdHistory[1]||
                          "\" is not a known command"||
         	          "\n   Try \"help\" or \"help break\" for assistance."
	      	  DState.Write(msg)
                  fail
                  }
               }
            # append word argument 
            put(arg_list,s)
            s := ""
             # append colon argument 
            every j := 1 to num_colon do  s ||:= ":"
            put(arg_list,s)
            num_colon := 0
            s := ""
            }
         }
         # append the last word arg (after last colon)
         put(arg_list,s)
      }
   return arg_list
end



#
# Sets Breakpoints on line numbers or procedure names
# [b linenum], [b ProcName], [b file linenum]
#
method cmdBreak(cmd)
   local code, line, fname, cname, pkgname, arg, break_point, i
   local coexp, num_colon, arg_list
   msg := ""
   if not (DState.State = (LOAD | PAUSE)) then {
      DState.State := ERROR
      msg := "\n   No Program is Loaded_
	      \n   Type \"help\" for assistance"
      DState.Write(msg)
      return
      }
   DState.State := SKIP

   # if cmd is only "break"; will print all of the preset breakpoints info
   if *cmd = 1 then {
      printBreakInfo()
      return
      }

   # [breakcmd] [coexp N] - get co-expression if this syntax is used
   if *cmd >= 4 & cmd[-2] == "coexp" then {
      if /(coexp := DState.coState.get_coexp(cmd[-1])) then {
	 DState.State := ERROR
         msg := "\n   "||cmd[-2]||" "||cmd[-1]||" does not exist."||
	        "\n   Use command \"coexp\" to view activated co-expressions."
         DState.Write(msg)
         fail
         }
      until pull(cmd) == "coexp" # pull [coexp N] off list
      }

   # "break line" or "break procedure/method"
   if *cmd = 2 then {

      # parse cmd[2] for word args, :, and ::
      if not (arg_list := parse_colon_arg(cmd[2])) then fail

      # break line | break proc/method
      if *arg_list = 1 then {
         arg := cmd[2]

         # arg is a proc/method, get file and lineno 
         if not (line := integer(arg)) then {
            if (temp := DState.srcFile.findProcMethod(arg)) then {
            #if (temp := DState.srcFile.findProc(arg)) then {
               fname := temp[1]
               line := temp[2]
               }
            else {
               DState.State := ERROR
               msg := "\n   Could not find procedure \""||arg||"\""
                      "\n   Please try again"
               DState.Write(msg)
               fail
               }
            }
         # in the case of 'break line' and no filename 
         if /fname then {
            if DState.State = PAUSE then {
      	       fname := keyword("file",MONITORED)
               }
            else
	    fname := DState.srcFile.procMainFile
            }
         }
      # break file:line 
      else if *arg_list = 3 & arg_list[2] == ":" then {
         fname := arg_list[1]
         arg := arg_list[3] 

         if temp := integer(arg) then line := temp 
         else {
            msg := "\n   Expected \""||arg||"\" to be a line number." ||
                   "\n   Please try again." 
            }
         }
      # break class::method | break package::procedure 
      else if *arg_list = 3 & arg_list[2] == "::" then {

	 pkgname := cname := arg_list[1]
	 arg := arg_list[3]

         if temp := (DState.srcFile.findPkgProc(pkgname, arg) |
                     DState.srcFile.findClassMethod(cname, arg)) then {
            fname := temp[1]
            line := temp[2]
            }
         else {
            msg := "\n   Could not find \""||arg_list[1]||"::"||arg||
                   "\".\n   Please try again."
            DState.Write(msg)
            fail
            }
         }
      # break package::class::method 
      else if *arg_list = 5 & arg_list[2] == "::" & arg_list[4] == "::" then {

         pkgname := arg_list[1] 
         cname := arg_list[3] 
         arg := arg_list[5] 

         if temp := DState.srcFile.findPkgClassMethod(pkgname, cname, arg) 
            then {
            fname := temp[1]
            line := temp[2]
            }
         else {
            msg := "\n   Could not find \""||pkgname||"::"||arg||"::"||arg||
                   "\".\n   Please try again."
            DState.Write(msg)
            fail
            }
         }
      # invalid syntax
      else {
         DState.State := ERROR
         msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
         msg ||:="\n   Try \"help\" or \"help break\" for assistance."
         DState.Write(msg)
         return
         }
      }
   else if *cmd = 3 then { # break file line 
      fname := cmd[2]
      arg   := cmd[3]

      if temp := integer(arg) then line := temp 
      }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      return
      }
  
   if \fname then 
      if not find(".icn",fname) then fname ||:= ".icn"

   #debug("trying to set breakpoint at '",fname,":",line,"'")
   # create breakpoint
   if code := DState.srcFile.getSrcLine(fname, line) then 
      break_point := breakPt(count +:= 1, fname, line, ENABLED, code, coexp)

   # record breakPt(fname, linenum, code) only if it doesn't exist already
   if \break_point & \break_point.line then {
      line := break_point.line
      if not isBreakExist(fname, line, break_point) then {
	 addBreakPoint(fname, break_point)
         msg ||:= constructBpMsg(break_point)
	 }
      DState.Write(msg)
      return
      }
   else {
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      }
end

#
# clear all breakpoints
#
method clearAllBreakpoints()
    local x, size := 0

    size := *breakPoints
    if size > 0 then {
       DState.breakMask := set()
       every x := key(breakPoints) do
	  delete(breakPoints, x)
       msg := "\n   All breakpoints are cleared; ("||size||" total)."
       count := 0
       }
    else
       msg := "\n   No breakpoints are available to be cleared."
    DState.Write(msg)
    return
end

#
# It clears pre-set breakpoints
#
method cmdClear(cmd)
   local line, fname, arg, id, i, size:=0

   # clears all of the preset breakpoints
   # 'clear break'
   if *cmd = 2 then {
      clearAllBreakpoints()
      return
      }
   # 'clear break line' | 'clear break procedure'
   if *cmd = 3 then {
      arg := cmd[3]

      # arg is a proc/method, get file and lineno 
      if not (line := integer(arg)) then {
         if (temp := DState.srcFile.findProc(arg)) then {
            fname := temp[1]
            line := temp[2]
            }
         else {
            DState.State := ERROR
            msg := "\n   Could not find procedure \""||arg||"\""
                   "\n   Please try again"
            DState.Write(msg)
            fail
            }
         }

      # in the case of 'break line' and no filename 
      if /fname then {
         if DState.State = PAUSE then {
      	    fname := keyword("file",MONITORED)
            }
         else
	 fname := DState.srcFile.procMainFile
         }
      }
   # 'break file line'
   else if *cmd = 4 then {
      fname := cmd[3]
      line := arg := cmd[4]
      }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      return
      }

   if \fname then {
      if not find(".icn", fname) then
	 fname ||:= ".icn"
      }

   if (id := isBreakExist(fname, line)) then {
      deleteBreakPoint(fname, line)
      msg  :="\n   Deleted breakpoint #"||id||" at : file "||fname||
             ", line "||line ||"."
      msg||:="\n   Source code:"||DState.srcFile.getSrcLine(fname, line)
      }
   else {
      msg :="\n   No breakpoint at : file "||fname||", line "||line ||"."
      msg||:="\n   Source code: "||DState.srcFile.getSrcLine(fname, line)
      }
   DState.Write(msg)
end

#
# It deletes pre-set breakpoints
#
method cmdDelete(cmd)
   local id, x, L, i, j:=0

   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].state ~= DELETED then {
	       L[i].state := DELETED
	       j +:= 1
	       }
	    }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are deleted; ("||j||" in total)."
      else
	 msg := "\n   No breakpoints are available to be deleted."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then
	       if L[i].state ~= DELETED then {
	          L[i].state := DELETED
	          msg := "\n   Breakpoint #"||id||" is deleted."
	          DState.Write(msg)
	          return
	          }
	       else {
	          msg := "\n   Breakpoint #"||id||" is already deleted."
	          DState.Write(msg)
	          fail
	         }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

#
# It deletes pre-set breakpoints
#
method cmdEnable(cmd)
   local id, x, L, i, j:=0

   # Enables all the preset breakpoints
   # enable break
   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do
	    if L[i].state = DISABLED then {
	       L[i].state := ENABLED
	       j +:= 1
	       }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are enabled; ("||j||" total)."
      else
	 msg := "\n   No disabled breakpoints are available to be enabled."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then
	       if L[i].state = DISABLED then {
	          L[i].state := ENABLED
	          msg := "\n   Breakpoint #"||id||" is enabled."
	          DState.Write(msg)
	          return
	          }
	       else {
	          if L[i].state = ENABLED then
	             msg:="\n   Breakpoint #"||id||" is already enabled."
	          else
	             msg:="\n   Breakpoint #"||id||" is deleted;_
	                   it cannot be enabled."
	          DState.Write(msg)
	          fail
	         }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

#
# It deletes pre-set breakpoints
#
method cmdDisable(cmd)
   local id, x, L, i, j := 0

   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do
	    if L[i].state := ENABLED then {
	       L[i].state := DISABLED
	       j +:= 1
	       }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are disabled; ("||j||" total)."
      else
	 msg := "\n   No enabled breakpoints are available to be disabled."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then {
	       if L[i].state = ENABLED then {
	          L[i].state := DISABLED
	          msg := "\n   Breakpoint #"||id||" is disabled."
	          DState.Write(msg)
	          return
	          }
	       else {
	          if L[i].state = DISABLED then
	             msg:="\n   Breakpoint #"||id||" is already disabled."
	          else
	             msg:="\n   Breakpoint #"||id||" is deleted;_
	                   it cannot be disabled."
	          DState.Write(msg)
	          fail
	         }
	       }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

method resetBreakpoints()
    local x, size := 0

    size := *breakPoints
    if size > 0 then {
       DState.breakMask := set()
       every x := key(breakPoints) do
	  delete(breakPoints, x)
       count := 0
       }
    return
end

#
# Initialization
#
initially()
   breakPoints := table(0)
   count := 0
   msg :="\n   "
end
