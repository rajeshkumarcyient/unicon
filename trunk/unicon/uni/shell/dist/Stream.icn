############################################################################
#
# File:     Stream.icn
#
# Subject:  Objects to manage stream access
#
# Author:   Arthur C. Eschenlauer
#
# Date:     September 25, 2007
#
# Version:  0.9
#
############################################################################
#
#   This file is in the public domain.
#   The freedom of its content is protected by the Lesser GNU public
#     license, version 2.1, February 1999,
#     http://www.gnu.org/licenses/lgpl.html
#   which means you are granted permission to use this in any way that 
#   does not limit others' freedom to use it.
#
############################################################################
#
#  These classes are designed to provide a common interface to exchange data
#  with lists, files, and coexpressions.
#   - Stream( L ) produces an instance of StreamL
#   - Stream( f ) and Stream(args[ ]) produce an instance of Streamf
#      where args are the arguments to the open( ) function 
#   - Stream( C, "r" | "w" ) produces an instance of C
#   - Stream( StreamL ) produces StreamL
#
# Interface:
#
#   Method  C      f      L      Behavior
#   ------  -----  -----  -----  --------
#   Close   *      *      *      Closes f, cofails C, or replaces L with [ ]
#   Data    *      *      *      Produces the list, file, or co-expression
#                                   managed by StreamL, Streamf, or StreamC
#   Flush   *      *      *      Produces result of flush(f), or &null.
#   Get     *      *      *      Produces a value; can transmit a value to C
#   Pull    fails  fails  *      Produces a value
#   Push    fails  fails  *      Produces a list as long as number of args
#   Put     *      *      *      Produces a list as long as number of args
#   Select  *      *      *      Produces &null if Get will produce a value
#   Type    *      *      *      Produces "list" | "file" | "co-expression"
#
#   When a producer coexpression uses StreamC to transmit values to a 
#   consumer coexpression that receives them using StreamC, the values 
#   transmitted will be the same regardless of whether the producer or
#   the consumer was activated first.
#
############################################################################
#
#  L i n k s:  n o n e
#
############################################################################

# set tracking which coexpression-streams' coexpressions have been activated
# friend: shell.icn - variable is manipulated by shell.icn
global StreamC_activated 

# set StreamC_trace to a non-null value to enable tracing of StreamC methods
global StreamC_trace

# StreamC_label may be set to a string for coactrace( ) and cofailtrace( )
global StreamC_label

# trace may be set to the write function ("trace := write") or left null
# friend: shell.icn - variable is manipulated by shell.icn
global trace

# trace_task_id is a string representing the lineage of the task
#   children of shell.icn are "1", "2", etc., but if shell.icn
#   invokes shell.icn recursively, the child shell's children
#   are may be "1.1", "1.2", etc.
# friend: shell.icn - variable is manipulated by shell.icn
global trace_task_id 

# trace_task_symbol is a table where:
#   the key is a co-expression
#   the value is a string
# values are the co-expression's task id and symbol
# friend: shell.icn - variable is manipulated by shell.icn
global trace_task_symbol

# ushpath is a list of paths to search for input files
# friend: shell.icn - variable is manipulated by shell.icn
global ushpath

procedure Stream( p_device, p_mode, p_other[ ] )
  case type(\p_device) of
  {
    "string"         : return( Streamf( p_device, \p_mode, p_other ) )
    "file"           : return( Streamf( p_device, &null  , 1       ) )
    "list"           : return( StreamL( p_device ) )
    "co-expression"  : return( StreamC( p_device, \p_mode ) )
    "StreamL__state" : return p_device
  }
  fail
end # procedure Stream

class Stream_Abstract( )
  method Push( )  ; fail ; end
  method Put( )   ; fail ; end
  method Pull( )  ; fail ; end
  method Get( )   ; fail ; end
  method Select( ); fail ; end
  method Close( ) ; fail ; end
  method Flush( ) ; fail ; end
  method Type( )  ; fail ; end
  method Data( )  ; fail ; end
 initially( )
  stop("class Stream_Abstract cannot be instantiated")
end # class Stream_Abstract

class Streamf : Stream_Abstract ( file, mode, readfunc )

  method Data( )
    return file
  end

  method Type( )
    return "file"
  end

  method Put( p_item[ ] )
    local item
    \file | fail
    every item := !p_item
    do {
      if
        \item
      then {
        write(file, item) | fail
      }
    }
    return p_item
  end

  method Get( )
    return read(\file)
  end

  method Flush( )
    return flush(\file)
  end

  method Select( p_timeout )
    return ( select( \file, p_timeout ) > 0 , &null )
  end

  method Close( )
    if file === &input | &output | &error
    then
      return ( file := &null, &null )
    else
      return close(\file)
  end

  initially( p_argv[ ] )
    local arglist
    readfunc := read
    /ushpath := [""]
    if 
      ( /p_argv[2], \p_argv[3] )
    then # args are filename and filemode, only
      file := p_argv[1]
    else {
      # flilemode defaults to "r" to be like open
      mode := \p_argv[2] | "r"
      if 
        p_argv[1] == "-"
      then {
        # user requested either stdin or stdout
        if 
          find( mode, "r t u " )
        then
          file := &input
        else
          file := &output
      }
      else {
        if 
          mode ? ="n" || ( ="a" | "" ) || ="u"
        then 
          readfunc := receive
        # user requested a file by name; search the ushpath
        ( arglist <- [ !ushpath || p_argv[1] ] ||| p_argv[2:0]
        , file := open ! \arglist
        # , write( &errout, "opened ", p_argv[1] )
        ) | fail
      }
    }
end # class Streamf

class StreamL : Stream_Abstract ( queue )

  method Data( )
    return queue
  end

  method Type( )
    return "list"
  end

  method Push(p_item[ ])
    \p_item | fail
    every push( queue, !p_item )
    return p_item
  end

  method Put(p_item[ ])
    \p_item | fail
    every put( queue, !p_item )
    return p_item
  end

  method Pull( )
    return pull(queue)
  end

  method Get( )
    return get(queue)
  end

  method Select( )
    return 0 < *queue   # produce *queue only if *queue > 0
  end

  method Close( )
    queue := [ ]
    return &null
  end

  method Flush( )
    return &null
  end

 initially( L )
  queue := \L | fail
end # class StreamL

class StreamC : Stream_Abstract( queue, coexp, hasFailed, write_mode, tracing_prefix )

  method Data( )
    return coexp
  end

  method Type( )
    return "co-expression"
  end

  method Put( p_item[ ] )
    local item
    local counter
    ( \p_item, *p_item ~= 0 ) | fail
    queue := [ ]
    if \trace then counter := 0

    # first activation, with optional tracing
    if
      \tracing_prefix
    then 
      if   put( queue, coactrace( pop(p_item)\1, coexp, tracing_prefix )\1 )
      then {
             hasFailed := &null
             (\trace)( \tracing_prefix, ": StreamC.Put first activation produced "||image(queue[-1]))
           }
      else {
             hasFailed := 1
             (\trace)( \tracing_prefix, ": _____ StreamC.Put first activation failed ")
           }

    while item := pop(p_item) do {
      if
        /tracing_prefix
      then
        if   put( queue
                , if /trace | /StreamC_label
                  then ( item @ coexp  )\1
                  else coactrace( item, coexp, StreamC_label )\1
                )
        then hasFailed := &null
        else hasFailed := 1
      else
        if   put( queue, coactrace( item, coexp, tracing_prefix )\1 )
        then {
               hasFailed := &null
               (\trace)( \tracing_prefix, ": StreamC.Put produced "||image(queue[-1]))
             }
        else {
               hasFailed := 1
               (\trace)( \tracing_prefix, ": _____ StreamC.Put failed ") & hasFailed := 1
             }
      }
    return ( /hasFailed, queue )
  end

  method Get( p_item )
    local retval
    if
      retval := if /trace | /StreamC_label
                then (p_item @ coexp)\1
                else coactrace( p_item, coexp, StreamC_label )\1
    then {
      hasFailed := &null
      (\trace)( \tracing_prefix, ": StreamC.Get produced "||image(retval) )
      return retval
    }
    else {
      hasFailed := 1
      (\trace)( \tracing_prefix, ": _____ StreamC.Get failed" )
      fail
    }
  end

  method Select( )
    return ( /hasFailed , &null )
  end

  method Flush( )
    return &null
  end

  method Close( )
    queue := [ ]
    (\trace)( \tracing_prefix ||
           ": _____ StreamC.Close cofailing stream opened for " ||
           ( if \write_mode then "w" else "r")
         )
    if 
      \write_mode 
    then {
      write_mode := &null
      return cofail( coexp )\1 | &null
    }
    return &null
  end

 initially( p_coexp, p_mode )
  # set up tracing if StreamC_trace is not null
  # if trace is already assigned, do not override the assignment
  if
    \StreamC_trace
  then
    ( tracing_prefix := 
      ( trace_task_id := ( \trace_task_id | "0" )\1
      , " ______ (" || trace_task_id || ") " || StreamC_trace
      ) | 
      " ______ " || StreamC_trace
    , trace := \trace | write 
    )

  # default mode is read
  /p_mode := "r"
  coexp := \p_coexp | fail
  (\trace)( \tracing_prefix, ": instantiating StreamC")
  /StreamC_activated := variable( "StreamC_activated", p_coexp )
  /StreamC_activated & (\trace)( \tracing_prefix, ": ...initializing StreamC_activated")
  /StreamC_activated := set( [ ] )
  insert( StreamC_activated, &source )
  if
    find( p_mode, "r" )
  then {
    (\trace)( \tracing_prefix, ": StreamC constructor: mode r")
  }
  else {
    /write_mode := 1
    if
      not member( StreamC_activated, p_coexp )
    then {
      insert( StreamC_activated, p_coexp )
        (\trace)( \tracing_prefix, ": StreamC constructor: mode w activating p_coexp ")
      if /trace | /StreamC_label
      then (&null @ p_coexp)\1
      else coactrace( &null, p_coexp, StreamC_label )\1
    }
    else {
      (\trace)( \tracing_prefix, ": StreamC constructor: mode w NOT ACTIVATING p_coexp ")
    }
  }
  &null # so constructor will succeed even after last expression fails
end # class StreamC

# coactrace acts like "value @ coexpr", but traces info to &output
procedure coactrace( value, coexpr, label )
  local result, cnt
  
  cnt := 1

  (\trace) ( " ... coactrace: " || label || " is transmitting: " ||
         ( image(\value) | "&null" )
       )
  
  every  result := value @ coexpr  do {
    (\trace) ( " ... coactrace: " || label ||
           ( " received result "||cnt||": "||image(\result) |
             " received: &null"
           )
         )
    cnt +:= 1
    suspend result
  }
end # procedure coactrace

# acts like cofail( coexpr ), but traces info to &output
procedure cofailtrace( coexpr, label )
  local result, cnt
  cnt := 1
  (\trace)(" ... cofailtrace: "||label||" about to suspend and cofail")
  every result := cofail( coexpr ) do {
    (\trace)( " ... cofailtrace: cofail " || label ||
           ( " received result "||cnt||": "||image(\result)|
             " received: &null"
           )
         )
    cnt +:= 1
    suspend result
  }
  (\trace)(" XXX cofailtrace [ " || label || " ]: " || 
           trace_task_symbol[ &current ] || 
           " received failure from " || trace_task_symbol[&source] )
  &current ~=== &source  &  fail 
  stop( "fatal error: infinite failure - task "||label||" failing to self")
end # procedure cofailtrace

# invoke a callback function as a co-expression service
procedure service( callback, moreargs, source )
  local failed, result, tracing_prefix

  # sanity check
  \callback | fail
  
  ( # calculate the tracing prefix if applicable
    tracing_prefix := " ______ " || \StreamC_trace
    # and set the tracing procedure identifier
    #   if applicable and not yet set
  , /trace := write 
  )

  # save the &source if it was not supplied as an argument
  /source := &source

  # repeat endlessly
  repeat {
    
    # transmit result to source, and get next operand from source
    #   1. if source transmits failure, abort
    (\trace)( (\tracing_prefix | \trace_task_id | "unknown") || 
              ": about to activate or cofail source" ) 
    if 
      not ( 
        result := if   /failed 
                  then (result @ source)\1 
                  else cofail( source )\1
      )
    then 
      stop( ) # terminate task and yield control of execution 
              #   back to parent (main) task
    
    #  2. save the &source for the current resumption before invoking
    #     the callback (in case the callback needs to resume other 
    #     services or co-expressions before returning)
    source := &source
    
    #  3. invoke callback to produce next result (or failure)
    ((/failed,\trace))( (\tracing_prefix | \trace_task_id | "unknown") || 
                        ": about to invoke callback" ) 
    if 
      result := callback( result, moreargs )\1
    then 
      failed := &null
    else
      failed := 1
  }
end # procedure service

# vim: :set filetype=icon syntax=icon ai ts=2 sw=2 expandtab :
